export declare module EventPayloads {
    type WebhookPayloadWorkflowRunWorkflowRunRepositoryOwner = {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
    };
    type WebhookPayloadWorkflowRunWorkflowRunRepository = {
        archive_url: string;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        deployments_url: string;
        description: string;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        hooks_url: string;
        html_url: string;
        id: number;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        languages_url: string;
        merges_url: string;
        milestones_url: string;
        name: string;
        node_id: string;
        notifications_url: string;
        owner: WebhookPayloadWorkflowRunWorkflowRunRepositoryOwner;
        private: boolean;
        pulls_url: string;
        releases_url: string;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        tags_url: string;
        teams_url: string;
        trees_url: string;
        url: string;
    };
    type WebhookPayloadWorkflowRunWorkflowRunHeadRepositoryOwner = {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
    };
    type WebhookPayloadWorkflowRunWorkflowRunHeadRepository = {
        archive_url: string;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        deployments_url: string;
        description: string;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        hooks_url: string;
        html_url: string;
        id: number;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        languages_url: string;
        merges_url: string;
        milestones_url: string;
        name: string;
        node_id: string;
        notifications_url: string;
        owner: WebhookPayloadWorkflowRunWorkflowRunHeadRepositoryOwner;
        private: boolean;
        pulls_url: string;
        releases_url: string;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        tags_url: string;
        teams_url: string;
        trees_url: string;
        url: string;
    };
    type WebhookPayloadWorkflowRunWorkflowRunHeadCommitCommitter = {
        email: string;
        name: string;
    };
    type WebhookPayloadWorkflowRunWorkflowRunHeadCommitAuthor = {
        email: string;
        name: string;
    };
    type WebhookPayloadWorkflowRunWorkflowRunHeadCommit = {
        author: WebhookPayloadWorkflowRunWorkflowRunHeadCommitAuthor;
        committer: WebhookPayloadWorkflowRunWorkflowRunHeadCommitCommitter;
        id: string;
        message: string;
        timestamp: string;
        tree_id: string;
    };
    type WebhookPayloadWorkflowRunWorkflowRun = {
        artifacts_url: string;
        cancel_url: string;
        check_suite_url: string;
        conclusion: string | null;
        created_at: string;
        event: string;
        head_branch: string;
        head_commit: WebhookPayloadWorkflowRunWorkflowRunHeadCommit;
        head_repository: WebhookPayloadWorkflowRunWorkflowRunHeadRepository;
        head_sha: string;
        html_url: string;
        id: number;
        jobs_url: string;
        logs_url: string;
        node_id: string;
        pull_requests: Array<any>;
        repository: WebhookPayloadWorkflowRunWorkflowRunRepository;
        rerun_url: string;
        run_number: number;
        status: string;
        updated_at: string;
        url: string;
        workflow_id: number;
        workflow_url: string;
    };
    type WebhookPayloadWorkflowRunWorkflow = {
        badge_url: string;
        created_at: string;
        html_url: string;
        id: number;
        name: string;
        node_id: string;
        path: string;
        state: string;
        updated_at: string;
        url: string;
    };
    type WebhookPayloadWorkflowRunOrganization = {
        avatar_url: string;
        description: string;
        events_url: string;
        hooks_url: string;
        id: number;
        issues_url: string;
        login: string;
        members_url: string;
        node_id: string;
        public_members_url: string;
        repos_url: string;
        url: string;
    };
    type WebhookPayloadWorkflowRun = {
        action: "action" | "completed" | "requested";
        organization: WebhookPayloadWorkflowRunOrganization;
        repository: PayloadRepository;
        sender: PayloadSender;
        workflow?: WebhookPayloadWorkflowRunWorkflow;
        workflow_run?: WebhookPayloadWorkflowRunWorkflowRun;
    };
    type WebhookPayloadWorkflowDispatchOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
    };
    type WebhookPayloadWorkflowDispatchInputs = {};
    type WebhookPayloadWorkflowDispatch = {
        inputs: WebhookPayloadWorkflowDispatchInputs;
        ref: string;
        repository: PayloadRepository;
        organization: WebhookPayloadWorkflowDispatchOrganization;
        sender: PayloadSender;
        workflow: string;
    };
    type WebhookPayloadWatchInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadWatch = {
        action: "started";
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadWatchInstallation;
    };
    type WebhookPayloadTeamAddInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadTeamAddOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
    };
    type WebhookPayloadTeamAddTeam = {
        name: string;
        id: number;
        node_id: string;
        slug: string;
        description: string;
        privacy: string;
        url: string;
        html_url: string;
        members_url: string;
        repositories_url: string;
        permission: string;
    };
    type WebhookPayloadTeamAdd = {
        team: WebhookPayloadTeamAddTeam;
        repository: PayloadRepository;
        organization: WebhookPayloadTeamAddOrganization;
        sender: PayloadSender;
        installation?: WebhookPayloadTeamAddInstallation;
    };
    type WebhookPayloadTeamChanges = {};
    type WebhookPayloadTeamOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
    };
    type PayloadRepositoryPermissions = {
        pull: boolean;
        push: boolean;
        admin: boolean;
    };
    type WebhookPayloadTeamTeam = {
        name: string;
        id: number;
        node_id: string;
        slug: string;
        description: string | null;
        privacy: string;
        url: string;
        html_url: string;
        members_url: string;
        repositories_url: string;
        permission: string;
    };
    type WebhookPayloadTeam = {
        action: "added_to_repository" | "created" | "deleted" | "edited" | "removed_from_repository";
        team: WebhookPayloadTeamTeam;
        repository?: PayloadRepository;
        organization: WebhookPayloadTeamOrganization;
        sender: PayloadSender;
        changes?: WebhookPayloadTeamChanges;
    };
    type WebhookPayloadStatusInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadStatusBranchesItemCommit = {
        sha: string;
        url: string;
    };
    type WebhookPayloadStatusBranchesItem = {
        name: string;
        commit: WebhookPayloadStatusBranchesItemCommit;
        protected: boolean;
    };
    type WebhookPayloadStatusCommitCommitter = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadStatusCommitAuthor = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadStatusCommitCommitVerification = {
        verified: boolean;
        reason: string;
        signature: string;
        payload: string;
    };
    type WebhookPayloadStatusCommitCommitTree = {
        sha: string;
        url: string;
    };
    type WebhookPayloadStatusCommitCommitCommitter = {
        name: string;
        email: string;
        date: string;
    };
    type WebhookPayloadStatusCommitCommitAuthor = {
        name: string;
        email: string;
        date: string;
    };
    type WebhookPayloadStatusCommitCommit = {
        author: WebhookPayloadStatusCommitCommitAuthor;
        committer: WebhookPayloadStatusCommitCommitCommitter;
        message: string;
        tree: WebhookPayloadStatusCommitCommitTree;
        url: string;
        comment_count: number;
        verification: WebhookPayloadStatusCommitCommitVerification;
    };
    type WebhookPayloadStatusCommit = {
        sha: string;
        node_id: string;
        commit: WebhookPayloadStatusCommitCommit;
        url: string;
        html_url: string;
        comments_url: string;
        author: WebhookPayloadStatusCommitAuthor;
        committer: WebhookPayloadStatusCommitCommitter;
        parents: Array<any>;
    };
    type WebhookPayloadStatus = {
        id: number;
        sha: string;
        name: string;
        target_url: null;
        context: string;
        description: null;
        state: string;
        commit: WebhookPayloadStatusCommit;
        branches: Array<WebhookPayloadStatusBranchesItem>;
        created_at: string;
        updated_at: string;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadStatusInstallation;
    };
    type WebhookPayloadStar = {
        action: "created" | "deleted";
        starred_at: string | null;
        repository: PayloadRepository;
        sender: PayloadSender;
    };
    type WebhookPayloadSponsorshipChangesTierFrom = {
        node_id: string;
        created_at: string;
        description: string;
        monthly_price_in_cents: number;
        monthly_price_in_dollars: number;
        name: string;
    };
    type WebhookPayloadSponsorshipChangesTier = {
        from: WebhookPayloadSponsorshipChangesTierFrom;
    };
    type WebhookPayloadSponsorshipChanges = {
        tier: WebhookPayloadSponsorshipChangesTier;
    };
    type WebhookPayloadSponsorshipSponsorshipTier = {
        node_id: string;
        created_at: string;
        description: string;
        monthly_price_in_cents: number;
        monthly_price_in_dollars: number;
        name: string;
    };
    type WebhookPayloadSponsorshipSponsorshipSponsor = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadSponsorshipSponsorshipSponsorable = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadSponsorshipSponsorship = {
        node_id: string;
        created_at: string;
        sponsorable: WebhookPayloadSponsorshipSponsorshipSponsorable;
        sponsor: WebhookPayloadSponsorshipSponsorshipSponsor;
        privacy_level: string;
        tier: WebhookPayloadSponsorshipSponsorshipTier;
    };
    type WebhookPayloadSponsorship = {
        action: "cancelled" | "created" | "edited" | "pending_cancellation" | "pending_tier_change" | "tier_changed";
        sponsorship: WebhookPayloadSponsorshipSponsorship;
        sender: PayloadSender;
        changes?: WebhookPayloadSponsorshipChanges;
        effective_date?: string;
    };
    type WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion = {
        identifier: string;
    };
    type WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemPackage = {
        ecosystem: string;
        name: string;
    };
    type WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItem = {
        package: WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemPackage;
        severity: string;
        vulnerable_version_range: string;
        first_patched_version: WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion;
    };
    type WebhookPayloadSecurityAdvisorySecurityAdvisoryReferencesItem = {
        url: string;
    };
    type WebhookPayloadSecurityAdvisorySecurityAdvisoryIdentifiersItem = {
        value: string;
        type: string;
    };
    type WebhookPayloadSecurityAdvisorySecurityAdvisory = {
        ghsa_id: string;
        summary: string;
        description: string;
        severity: string;
        identifiers: Array<WebhookPayloadSecurityAdvisorySecurityAdvisoryIdentifiersItem>;
        references: Array<WebhookPayloadSecurityAdvisorySecurityAdvisoryReferencesItem>;
        published_at: string;
        updated_at: string;
        withdrawn_at: null;
        vulnerabilities: Array<WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItem>;
    };
    type WebhookPayloadSecurityAdvisory = {
        action: "performed" | "published" | "updated";
        security_advisory: WebhookPayloadSecurityAdvisorySecurityAdvisory;
    };
    type WebhookPayloadSecretScanningAlertOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
    };
    type WebhookPayloadSecretScanningAlertAlert = {
        number: number;
        secret_type: string;
        resolution: null;
        resolved_by: null;
        resolved_at: null;
    };
    type WebhookPayloadSecretScanningAlert = {
        action: "created" | "reopened" | "resolved";
        alert: WebhookPayloadSecretScanningAlertAlert;
        repository: PayloadRepository;
        organization: WebhookPayloadSecretScanningAlertOrganization;
        sender: PayloadSender;
    };
    type WebhookPayloadRepositoryVulnerabilityAlertAlertDismisser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadRepositoryVulnerabilityAlertOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
    };
    type WebhookPayloadRepositoryVulnerabilityAlertAlert = {
        id: number;
        affected_range: string;
        affected_package_name: string;
        external_reference: string;
        external_identifier: string;
        fixed_in: string;
        ghsa_id?: string;
        created_at?: string;
        dismisser?: WebhookPayloadRepositoryVulnerabilityAlertAlertDismisser;
        dismiss_reason?: string;
        dismissed_at?: string;
    };
    type WebhookPayloadRepositoryVulnerabilityAlert = {
        action: "create" | "dismiss" | "resolve";
        alert: WebhookPayloadRepositoryVulnerabilityAlertAlert;
        repository?: PayloadRepository;
        sender?: PayloadSender;
        organization?: WebhookPayloadRepositoryVulnerabilityAlertOrganization;
    };
    type WebhookPayloadRepositoryImportOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
    };
    type WebhookPayloadRepositoryImport = {
        status: string;
        repository: PayloadRepository;
        organization: WebhookPayloadRepositoryImportOrganization;
        sender: PayloadSender;
    };
    type WebhookPayloadRepositoryInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadRepositoryOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
    };
    type WebhookPayloadRepository = {
        action: "archived" | "created" | "deleted" | "edited" | "privatized" | "publicized" | "renamed" | "transferred" | "unarchived";
        repository: PayloadRepository;
        sender: PayloadSender;
        organization?: WebhookPayloadRepositoryOrganization;
        installation?: WebhookPayloadRepositoryInstallation;
    };
    type WebhookPayloadRepositoryDispatchInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadRepositoryDispatchOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
    };
    type WebhookPayloadRepositoryDispatchClientPayload = {};
    type WebhookPayloadRepositoryDispatch = {
        action: "on-demand-test";
        branch: string;
        client_payload: WebhookPayloadRepositoryDispatchClientPayload;
        repository: PayloadRepository;
        organization: WebhookPayloadRepositoryDispatchOrganization;
        sender: PayloadSender;
        installation: WebhookPayloadRepositoryDispatchInstallation;
    };
    type WebhookPayloadReleaseInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadReleaseReleaseAuthor = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadReleaseRelease = {
        url: string;
        assets_url: string;
        upload_url: string;
        html_url: string;
        id: number;
        node_id: string;
        tag_name: string;
        target_commitish: string;
        name: null;
        draft: boolean;
        author: WebhookPayloadReleaseReleaseAuthor;
        prerelease: boolean;
        created_at: string;
        published_at: string;
        assets: Array<any>;
        tarball_url: string;
        zipball_url: string;
        body: null;
    };
    type WebhookPayloadRelease = {
        action: "created" | "deleted" | "edited" | "prereleased" | "published" | "released" | "unpublished";
        release: WebhookPayloadReleaseRelease;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadReleaseInstallation;
    };
    type WebhookPayloadPushOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
        name: string;
        company: null;
        blog: null;
        location: null;
        email: null;
        twitter_username: null;
        is_verified: boolean;
        has_organization_projects: boolean;
        has_repository_projects: boolean;
        public_repos: number;
        public_gists: number;
        followers: number;
        following: number;
        html_url: string;
        created_at: string;
        updated_at: string;
        type: string;
    };
    type WebhookPayloadPushInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadPushPusher = {
        name: string;
        email: string;
    };
    type WebhookPayloadPush = {
        ref: string;
        before: string;
        after: string;
        created: boolean;
        deleted: boolean;
        forced: boolean;
        base_ref: null;
        compare: string;
        commits: Array<any>;
        head_commit: null;
        repository: PayloadRepository;
        pusher: WebhookPayloadPushPusher;
        sender: PayloadSender;
        installation?: WebhookPayloadPushInstallation;
        organization?: WebhookPayloadPushOrganization;
    };
    type WebhookPayloadPullRequestReviewCommentOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
        name: string;
        company: null;
        blog: null;
        location: null;
        email: null;
        twitter_username: null;
        is_verified: boolean;
        has_organization_projects: boolean;
        has_repository_projects: boolean;
        public_repos: number;
        public_gists: number;
        followers: number;
        following: number;
        html_url: string;
        created_at: string;
        updated_at: string;
        type: string;
    };
    type WebhookPayloadPullRequestReviewCommentInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestLabelsItem = {
        id: number;
        node_id: string;
        url: string;
        name: string;
        color: string;
        default: boolean;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestRequestedReviewersItem = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestAssigneesItem = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestLinksStatuses = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestLinksCommits = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestLinksReviewComment = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestLinksReviewComments = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestLinksComments = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestLinksIssue = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestLinksHtml = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestLinksSelf = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestLinks = {
        self: WebhookPayloadPullRequestReviewCommentPullRequestLinksSelf;
        html: WebhookPayloadPullRequestReviewCommentPullRequestLinksHtml;
        issue: WebhookPayloadPullRequestReviewCommentPullRequestLinksIssue;
        comments: WebhookPayloadPullRequestReviewCommentPullRequestLinksComments;
        review_comments: WebhookPayloadPullRequestReviewCommentPullRequestLinksReviewComments;
        review_comment: WebhookPayloadPullRequestReviewCommentPullRequestLinksReviewComment;
        commits: WebhookPayloadPullRequestReviewCommentPullRequestLinksCommits;
        statuses: WebhookPayloadPullRequestReviewCommentPullRequestLinksStatuses;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestBaseRepoOwner = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestBaseRepo = {
        id: number;
        node_id: string;
        name: string;
        full_name: string;
        private: boolean;
        owner: WebhookPayloadPullRequestReviewCommentPullRequestBaseRepoOwner;
        html_url: string;
        description: null;
        fork: boolean;
        url: string;
        forks_url: string;
        keys_url: string;
        collaborators_url: string;
        teams_url: string;
        hooks_url: string;
        issue_events_url: string;
        events_url: string;
        assignees_url: string;
        branches_url: string;
        tags_url: string;
        blobs_url: string;
        git_tags_url: string;
        git_refs_url: string;
        trees_url: string;
        statuses_url: string;
        languages_url: string;
        stargazers_url: string;
        contributors_url: string;
        subscribers_url: string;
        subscription_url: string;
        commits_url: string;
        git_commits_url: string;
        comments_url: string;
        issue_comment_url: string;
        contents_url: string;
        compare_url: string;
        merges_url: string;
        archive_url: string;
        downloads_url: string;
        issues_url: string;
        pulls_url: string;
        milestones_url: string;
        notifications_url: string;
        labels_url: string;
        releases_url: string;
        deployments_url: string;
        created_at: string;
        updated_at: string;
        pushed_at: string;
        git_url: string;
        ssh_url: string;
        clone_url: string;
        svn_url: string;
        homepage: null;
        size: number;
        stargazers_count: number;
        watchers_count: number;
        language: string;
        has_issues: boolean;
        has_projects: boolean;
        has_downloads: boolean;
        has_wiki: boolean;
        has_pages: boolean;
        forks_count: number;
        mirror_url: null;
        archived: boolean;
        disabled: boolean;
        open_issues_count: number;
        license: null;
        forks: number;
        open_issues: number;
        watchers: number;
        default_branch: string;
        allow_squash_merge?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        delete_branch_on_merge?: boolean;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestBaseUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestBase = {
        label: string;
        ref: string;
        sha: string;
        user: WebhookPayloadPullRequestReviewCommentPullRequestBaseUser;
        repo: WebhookPayloadPullRequestReviewCommentPullRequestBaseRepo;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestHeadRepoOwner = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestHeadRepo = {
        id: number;
        node_id: string;
        name: string;
        full_name: string;
        private: boolean;
        owner: WebhookPayloadPullRequestReviewCommentPullRequestHeadRepoOwner;
        html_url: string;
        description: null;
        fork: boolean;
        url: string;
        forks_url: string;
        keys_url: string;
        collaborators_url: string;
        teams_url: string;
        hooks_url: string;
        issue_events_url: string;
        events_url: string;
        assignees_url: string;
        branches_url: string;
        tags_url: string;
        blobs_url: string;
        git_tags_url: string;
        git_refs_url: string;
        trees_url: string;
        statuses_url: string;
        languages_url: string;
        stargazers_url: string;
        contributors_url: string;
        subscribers_url: string;
        subscription_url: string;
        commits_url: string;
        git_commits_url: string;
        comments_url: string;
        issue_comment_url: string;
        contents_url: string;
        compare_url: string;
        merges_url: string;
        archive_url: string;
        downloads_url: string;
        issues_url: string;
        pulls_url: string;
        milestones_url: string;
        notifications_url: string;
        labels_url: string;
        releases_url: string;
        deployments_url: string;
        created_at: string;
        updated_at: string;
        pushed_at: string;
        git_url: string;
        ssh_url: string;
        clone_url: string;
        svn_url: string;
        homepage: null;
        size: number;
        stargazers_count: number;
        watchers_count: number;
        language: string;
        has_issues: boolean;
        has_projects: boolean;
        has_downloads: boolean;
        has_wiki: boolean;
        has_pages: boolean;
        forks_count: number;
        mirror_url: null;
        archived: boolean;
        disabled: boolean;
        open_issues_count: number;
        license: null;
        forks: number;
        open_issues: number;
        watchers: number;
        default_branch: string;
        allow_squash_merge?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        delete_branch_on_merge?: boolean;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestHeadUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestHead = {
        label: string;
        ref: string;
        sha: string;
        user: WebhookPayloadPullRequestReviewCommentPullRequestHeadUser;
        repo: WebhookPayloadPullRequestReviewCommentPullRequestHeadRepo;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequestUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewCommentPullRequest = {
        url: string;
        id: number;
        node_id: string;
        html_url: string;
        diff_url: string;
        patch_url: string;
        issue_url: string;
        number: number;
        state: string;
        locked: boolean;
        title: string;
        user: WebhookPayloadPullRequestReviewCommentPullRequestUser;
        body: string;
        created_at: string;
        updated_at: string;
        closed_at: null;
        merged_at: null;
        merge_commit_sha: string;
        assignee: null;
        assignees: Array<WebhookPayloadPullRequestReviewCommentPullRequestAssigneesItem>;
        requested_reviewers: Array<WebhookPayloadPullRequestReviewCommentPullRequestRequestedReviewersItem>;
        requested_teams: Array<any>;
        labels: Array<WebhookPayloadPullRequestReviewCommentPullRequestLabelsItem>;
        milestone: null;
        commits_url: string;
        review_comments_url: string;
        review_comment_url: string;
        comments_url: string;
        statuses_url: string;
        head: WebhookPayloadPullRequestReviewCommentPullRequestHead;
        base: WebhookPayloadPullRequestReviewCommentPullRequestBase;
        _links: WebhookPayloadPullRequestReviewCommentPullRequestLinks;
        author_association: string;
    };
    type WebhookPayloadPullRequestReviewCommentCommentLinksPullRequest = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewCommentCommentLinksHtml = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewCommentCommentLinksSelf = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewCommentCommentLinks = {
        self: WebhookPayloadPullRequestReviewCommentCommentLinksSelf;
        html: WebhookPayloadPullRequestReviewCommentCommentLinksHtml;
        pull_request: WebhookPayloadPullRequestReviewCommentCommentLinksPullRequest;
    };
    type WebhookPayloadPullRequestReviewCommentCommentUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewCommentComment = {
        url: string;
        pull_request_review_id: number;
        id: number;
        node_id: string;
        diff_hunk: string;
        path: string;
        position: number;
        original_position: number;
        commit_id: string;
        original_commit_id: string;
        user: WebhookPayloadPullRequestReviewCommentCommentUser;
        body: string;
        created_at: string;
        updated_at: string;
        html_url: string;
        pull_request_url: string;
        author_association: string;
        _links: WebhookPayloadPullRequestReviewCommentCommentLinks;
    };
    type WebhookPayloadPullRequestReviewComment = {
        action: "created" | "deleted" | "edited";
        comment: WebhookPayloadPullRequestReviewCommentComment;
        pull_request: WebhookPayloadPullRequestReviewCommentPullRequest;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadPullRequestReviewCommentInstallation;
        organization?: WebhookPayloadPullRequestReviewCommentOrganization;
    };
    type WebhookPayloadPullRequestReviewOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
        name: string;
        company: null;
        blog: null;
        location: null;
        email: null;
        twitter_username: null;
        is_verified: boolean;
        has_organization_projects: boolean;
        has_repository_projects: boolean;
        public_repos: number;
        public_gists: number;
        followers: number;
        following: number;
        html_url: string;
        created_at: string;
        updated_at: string;
        type: string;
    };
    type WebhookPayloadPullRequestReviewInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadPullRequestReviewPullRequestLabelsItem = {
        id: number;
        node_id: string;
        url: string;
        name: string;
        color: string;
        default: boolean;
    };
    type WebhookPayloadPullRequestReviewPullRequestRequestedReviewersItem = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewPullRequestAssigneesItem = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewPullRequestLinksStatuses = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewPullRequestLinksCommits = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewPullRequestLinksReviewComment = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewPullRequestLinksReviewComments = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewPullRequestLinksComments = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewPullRequestLinksIssue = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewPullRequestLinksHtml = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewPullRequestLinksSelf = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewPullRequestLinks = {
        self: WebhookPayloadPullRequestReviewPullRequestLinksSelf;
        html: WebhookPayloadPullRequestReviewPullRequestLinksHtml;
        issue: WebhookPayloadPullRequestReviewPullRequestLinksIssue;
        comments: WebhookPayloadPullRequestReviewPullRequestLinksComments;
        review_comments: WebhookPayloadPullRequestReviewPullRequestLinksReviewComments;
        review_comment: WebhookPayloadPullRequestReviewPullRequestLinksReviewComment;
        commits: WebhookPayloadPullRequestReviewPullRequestLinksCommits;
        statuses: WebhookPayloadPullRequestReviewPullRequestLinksStatuses;
    };
    type WebhookPayloadPullRequestReviewPullRequestBaseRepoOwner = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewPullRequestBaseRepo = {
        id: number;
        node_id: string;
        name: string;
        full_name: string;
        private: boolean;
        owner: WebhookPayloadPullRequestReviewPullRequestBaseRepoOwner;
        html_url: string;
        description: null;
        fork: boolean;
        url: string;
        forks_url: string;
        keys_url: string;
        collaborators_url: string;
        teams_url: string;
        hooks_url: string;
        issue_events_url: string;
        events_url: string;
        assignees_url: string;
        branches_url: string;
        tags_url: string;
        blobs_url: string;
        git_tags_url: string;
        git_refs_url: string;
        trees_url: string;
        statuses_url: string;
        languages_url: string;
        stargazers_url: string;
        contributors_url: string;
        subscribers_url: string;
        subscription_url: string;
        commits_url: string;
        git_commits_url: string;
        comments_url: string;
        issue_comment_url: string;
        contents_url: string;
        compare_url: string;
        merges_url: string;
        archive_url: string;
        downloads_url: string;
        issues_url: string;
        pulls_url: string;
        milestones_url: string;
        notifications_url: string;
        labels_url: string;
        releases_url: string;
        deployments_url: string;
        created_at: string;
        updated_at: string;
        pushed_at: string;
        git_url: string;
        ssh_url: string;
        clone_url: string;
        svn_url: string;
        homepage: null;
        size: number;
        stargazers_count: number;
        watchers_count: number;
        language: string;
        has_issues: boolean;
        has_projects: boolean;
        has_downloads: boolean;
        has_wiki: boolean;
        has_pages: boolean;
        forks_count: number;
        mirror_url: null;
        archived: boolean;
        disabled: boolean;
        open_issues_count: number;
        license: null;
        forks: number;
        open_issues: number;
        watchers: number;
        default_branch: string;
        allow_squash_merge?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        delete_branch_on_merge?: boolean;
    };
    type WebhookPayloadPullRequestReviewPullRequestBaseUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewPullRequestBase = {
        label: string;
        ref: string;
        sha: string;
        user: WebhookPayloadPullRequestReviewPullRequestBaseUser;
        repo: WebhookPayloadPullRequestReviewPullRequestBaseRepo;
    };
    type WebhookPayloadPullRequestReviewPullRequestHeadRepoOwner = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewPullRequestHeadRepo = {
        id: number;
        node_id: string;
        name: string;
        full_name: string;
        private: boolean;
        owner: WebhookPayloadPullRequestReviewPullRequestHeadRepoOwner;
        html_url: string;
        description: null;
        fork: boolean;
        url: string;
        forks_url: string;
        keys_url: string;
        collaborators_url: string;
        teams_url: string;
        hooks_url: string;
        issue_events_url: string;
        events_url: string;
        assignees_url: string;
        branches_url: string;
        tags_url: string;
        blobs_url: string;
        git_tags_url: string;
        git_refs_url: string;
        trees_url: string;
        statuses_url: string;
        languages_url: string;
        stargazers_url: string;
        contributors_url: string;
        subscribers_url: string;
        subscription_url: string;
        commits_url: string;
        git_commits_url: string;
        comments_url: string;
        issue_comment_url: string;
        contents_url: string;
        compare_url: string;
        merges_url: string;
        archive_url: string;
        downloads_url: string;
        issues_url: string;
        pulls_url: string;
        milestones_url: string;
        notifications_url: string;
        labels_url: string;
        releases_url: string;
        deployments_url: string;
        created_at: string;
        updated_at: string;
        pushed_at: string;
        git_url: string;
        ssh_url: string;
        clone_url: string;
        svn_url: string;
        homepage: null;
        size: number;
        stargazers_count: number;
        watchers_count: number;
        language: string;
        has_issues: boolean;
        has_projects: boolean;
        has_downloads: boolean;
        has_wiki: boolean;
        has_pages: boolean;
        forks_count: number;
        mirror_url: null;
        archived: boolean;
        disabled: boolean;
        open_issues_count: number;
        license: null;
        forks: number;
        open_issues: number;
        watchers: number;
        default_branch: string;
        allow_squash_merge?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        delete_branch_on_merge?: boolean;
    };
    type WebhookPayloadPullRequestReviewPullRequestHeadUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewPullRequestHead = {
        label: string;
        ref: string;
        sha: string;
        user: WebhookPayloadPullRequestReviewPullRequestHeadUser;
        repo: WebhookPayloadPullRequestReviewPullRequestHeadRepo;
    };
    type WebhookPayloadPullRequestReviewPullRequestUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewPullRequest = {
        url: string;
        id: number;
        node_id: string;
        html_url: string;
        diff_url: string;
        patch_url: string;
        issue_url: string;
        number: number;
        state: string;
        locked: boolean;
        title: string;
        user: WebhookPayloadPullRequestReviewPullRequestUser;
        body: string;
        created_at: string;
        updated_at: string;
        closed_at: null;
        merged_at: null;
        merge_commit_sha: string;
        assignee: null;
        assignees: Array<WebhookPayloadPullRequestReviewPullRequestAssigneesItem>;
        requested_reviewers: Array<WebhookPayloadPullRequestReviewPullRequestRequestedReviewersItem>;
        requested_teams: Array<any>;
        labels: Array<WebhookPayloadPullRequestReviewPullRequestLabelsItem>;
        milestone: null;
        commits_url: string;
        review_comments_url: string;
        review_comment_url: string;
        comments_url: string;
        statuses_url: string;
        head: WebhookPayloadPullRequestReviewPullRequestHead;
        base: WebhookPayloadPullRequestReviewPullRequestBase;
        _links: WebhookPayloadPullRequestReviewPullRequestLinks;
        author_association: string;
    };
    type WebhookPayloadPullRequestReviewReviewLinksPullRequest = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewReviewLinksHtml = {
        href: string;
    };
    type WebhookPayloadPullRequestReviewReviewLinks = {
        html: WebhookPayloadPullRequestReviewReviewLinksHtml;
        pull_request: WebhookPayloadPullRequestReviewReviewLinksPullRequest;
    };
    type WebhookPayloadPullRequestReviewReviewUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestReviewReview = {
        id: number;
        node_id: string;
        user: WebhookPayloadPullRequestReviewReviewUser;
        body: null;
        commit_id: string;
        submitted_at: string;
        state: string;
        html_url: string;
        pull_request_url: string;
        author_association: string;
        _links: WebhookPayloadPullRequestReviewReviewLinks;
    };
    type WebhookPayloadPullRequestReview = {
        action: "dismissed" | "edited" | "submitted";
        review: WebhookPayloadPullRequestReviewReview;
        pull_request: WebhookPayloadPullRequestReviewPullRequest;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadPullRequestReviewInstallation;
        organization?: WebhookPayloadPullRequestReviewOrganization;
    };
    type WebhookPayloadPullRequestLabel = {
        id: number;
        node_id: string;
        url: string;
        name: string;
        color: string;
        default: boolean;
    };
    type WebhookPayloadPullRequestPullRequestMilestoneCreator = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestPullRequestMilestone = null | {
        url: string;
        html_url: string;
        labels_url: string;
        id: number;
        node_id: string;
        number: number;
        title: string;
        description: string;
        creator: WebhookPayloadPullRequestPullRequestMilestoneCreator;
        open_issues: number;
        closed_issues: number;
        state: string;
        created_at: string;
        updated_at: string;
        due_on: string;
        closed_at: string;
    };
    type WebhookPayloadPullRequestPullRequestAssignee = null | {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
        name: string;
        company: null;
        blog: null;
        location: null;
        email: null;
        twitter_username: null;
        is_verified: boolean;
        has_organization_projects: boolean;
        has_repository_projects: boolean;
        public_repos: number;
        public_gists: number;
        followers: number;
        following: number;
        html_url: string;
        created_at: string;
        updated_at: string;
        type: string;
    };
    type WebhookPayloadPullRequestInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadPullRequestAssignee = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestPullRequestLabelsItem = {
        id: number;
        node_id: string;
        url: string;
        name: string;
        color: string;
        default: boolean;
    };
    type WebhookPayloadPullRequestPullRequestRequestedReviewersItem = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestPullRequestAssigneesItem = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestPullRequestLinksStatuses = {
        href: string;
    };
    type WebhookPayloadPullRequestPullRequestLinksCommits = {
        href: string;
    };
    type WebhookPayloadPullRequestPullRequestLinksReviewComment = {
        href: string;
    };
    type WebhookPayloadPullRequestPullRequestLinksReviewComments = {
        href: string;
    };
    type WebhookPayloadPullRequestPullRequestLinksComments = {
        href: string;
    };
    type WebhookPayloadPullRequestPullRequestLinksIssue = {
        href: string;
    };
    type WebhookPayloadPullRequestPullRequestLinksHtml = {
        href: string;
    };
    type WebhookPayloadPullRequestPullRequestLinksSelf = {
        href: string;
    };
    type WebhookPayloadPullRequestPullRequestLinks = {
        self: WebhookPayloadPullRequestPullRequestLinksSelf;
        html: WebhookPayloadPullRequestPullRequestLinksHtml;
        issue: WebhookPayloadPullRequestPullRequestLinksIssue;
        comments: WebhookPayloadPullRequestPullRequestLinksComments;
        review_comments: WebhookPayloadPullRequestPullRequestLinksReviewComments;
        review_comment: WebhookPayloadPullRequestPullRequestLinksReviewComment;
        commits: WebhookPayloadPullRequestPullRequestLinksCommits;
        statuses: WebhookPayloadPullRequestPullRequestLinksStatuses;
    };
    type WebhookPayloadPullRequestPullRequestBaseRepoOwner = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestPullRequestBaseRepo = {
        id: number;
        node_id: string;
        name: string;
        full_name: string;
        private: boolean;
        owner: WebhookPayloadPullRequestPullRequestBaseRepoOwner;
        html_url: string;
        description: null;
        fork: boolean;
        url: string;
        forks_url: string;
        keys_url: string;
        collaborators_url: string;
        teams_url: string;
        hooks_url: string;
        issue_events_url: string;
        events_url: string;
        assignees_url: string;
        branches_url: string;
        tags_url: string;
        blobs_url: string;
        git_tags_url: string;
        git_refs_url: string;
        trees_url: string;
        statuses_url: string;
        languages_url: string;
        stargazers_url: string;
        contributors_url: string;
        subscribers_url: string;
        subscription_url: string;
        commits_url: string;
        git_commits_url: string;
        comments_url: string;
        issue_comment_url: string;
        contents_url: string;
        compare_url: string;
        merges_url: string;
        archive_url: string;
        downloads_url: string;
        issues_url: string;
        pulls_url: string;
        milestones_url: string;
        notifications_url: string;
        labels_url: string;
        releases_url: string;
        deployments_url: string;
        created_at: string;
        updated_at: string;
        pushed_at: string;
        git_url: string;
        ssh_url: string;
        clone_url: string;
        svn_url: string;
        homepage: null;
        size: number;
        stargazers_count: number;
        watchers_count: number;
        language: null | string;
        has_issues: boolean;
        has_projects: boolean;
        has_downloads: boolean;
        has_wiki: boolean;
        has_pages: boolean;
        forks_count: number;
        mirror_url: null;
        archived: boolean;
        disabled: boolean;
        open_issues_count: number;
        license: null;
        forks: number;
        open_issues: number;
        watchers: number;
        default_branch: string;
        allow_squash_merge?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        delete_branch_on_merge?: boolean;
    };
    type WebhookPayloadPullRequestPullRequestBaseUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestPullRequestBase = {
        label: string;
        ref: string;
        sha: string;
        user: WebhookPayloadPullRequestPullRequestBaseUser;
        repo: WebhookPayloadPullRequestPullRequestBaseRepo;
    };
    type WebhookPayloadPullRequestPullRequestHeadRepoOwner = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestPullRequestHeadRepo = {
        id: number;
        node_id: string;
        name: string;
        full_name: string;
        private: boolean;
        owner: WebhookPayloadPullRequestPullRequestHeadRepoOwner;
        html_url: string;
        description: null;
        fork: boolean;
        url: string;
        forks_url: string;
        keys_url: string;
        collaborators_url: string;
        teams_url: string;
        hooks_url: string;
        issue_events_url: string;
        events_url: string;
        assignees_url: string;
        branches_url: string;
        tags_url: string;
        blobs_url: string;
        git_tags_url: string;
        git_refs_url: string;
        trees_url: string;
        statuses_url: string;
        languages_url: string;
        stargazers_url: string;
        contributors_url: string;
        subscribers_url: string;
        subscription_url: string;
        commits_url: string;
        git_commits_url: string;
        comments_url: string;
        issue_comment_url: string;
        contents_url: string;
        compare_url: string;
        merges_url: string;
        archive_url: string;
        downloads_url: string;
        issues_url: string;
        pulls_url: string;
        milestones_url: string;
        notifications_url: string;
        labels_url: string;
        releases_url: string;
        deployments_url: string;
        created_at: string;
        updated_at: string;
        pushed_at: string;
        git_url: string;
        ssh_url: string;
        clone_url: string;
        svn_url: string;
        homepage: null;
        size: number;
        stargazers_count: number;
        watchers_count: number;
        language: null | string;
        has_issues: boolean;
        has_projects: boolean;
        has_downloads: boolean;
        has_wiki: boolean;
        has_pages: boolean;
        forks_count: number;
        mirror_url: null;
        archived: boolean;
        disabled: boolean;
        open_issues_count: number;
        license: null;
        forks: number;
        open_issues: number;
        watchers: number;
        default_branch: string;
        allow_squash_merge?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        delete_branch_on_merge?: boolean;
    };
    type WebhookPayloadPullRequestPullRequestHeadUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestPullRequestHead = {
        label: string;
        ref: string;
        sha: string;
        user: WebhookPayloadPullRequestPullRequestHeadUser;
        repo: WebhookPayloadPullRequestPullRequestHeadRepo;
    };
    type WebhookPayloadPullRequestPullRequestUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPullRequestPullRequest = {
        url: string;
        id: number;
        node_id: string;
        html_url: string;
        diff_url: string;
        patch_url: string;
        issue_url: string;
        number: number;
        state: string;
        locked: boolean;
        title: string;
        user: WebhookPayloadPullRequestPullRequestUser;
        body: string;
        created_at: string;
        updated_at: string;
        closed_at: null | string;
        merged_at: null;
        merge_commit_sha: null | string;
        assignee: WebhookPayloadPullRequestPullRequestAssignee;
        assignees: Array<WebhookPayloadPullRequestPullRequestAssigneesItem>;
        requested_reviewers: Array<WebhookPayloadPullRequestPullRequestRequestedReviewersItem>;
        requested_teams: Array<any>;
        labels: Array<WebhookPayloadPullRequestPullRequestLabelsItem>;
        milestone: WebhookPayloadPullRequestPullRequestMilestone;
        commits_url: string;
        review_comments_url: string;
        review_comment_url: string;
        comments_url: string;
        statuses_url: string;
        head: WebhookPayloadPullRequestPullRequestHead;
        base: WebhookPayloadPullRequestPullRequestBase;
        _links: WebhookPayloadPullRequestPullRequestLinks;
        author_association: string;
        draft: boolean;
        merged: boolean;
        mergeable: null | boolean;
        rebaseable: null | boolean;
        mergeable_state: string;
        merged_by: null;
        comments: number;
        review_comments: number;
        maintainer_can_modify: boolean;
        commits: number;
        additions: number;
        deletions: number;
        changed_files: number;
    };
    type WebhookPayloadPullRequest = {
        action: "assigned" | "closed" | "edited" | "labeled" | "locked" | "merged" | "opened" | "ready_for_review" | "reopened" | "review_request_removed" | "review_requested" | "synchronize" | "unassigned" | "unlabeled" | "unlocked";
        number: number;
        pull_request: WebhookPayloadPullRequestPullRequest;
        repository: PayloadRepository;
        sender: PayloadSender;
        assignee?: WebhookPayloadPullRequestAssignee;
        installation?: WebhookPayloadPullRequestInstallation;
        organization?: WebhookPayloadPullRequestOrganization;
        label?: WebhookPayloadPullRequestLabel;
    };
    type WebhookPayloadPublicInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadPublic = {
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadPublicInstallation;
    };
    type WebhookPayloadProjectInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadProjectProjectCreator = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadProjectProject = {
        owner_url: string;
        url: string;
        html_url: string;
        columns_url: string;
        id: number;
        node_id: string;
        name: string;
        body: string;
        number: number;
        state: string;
        creator: WebhookPayloadProjectProjectCreator;
        created_at: string;
        updated_at: string;
    };
    type WebhookPayloadProject = {
        action: "closed" | "created" | "deleted" | "edited" | "reopened";
        project: WebhookPayloadProjectProject;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadProjectInstallation;
    };
    type WebhookPayloadProjectColumnInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadProjectColumnProjectColumn = {
        url: string;
        project_url: string;
        cards_url: string;
        id: number;
        node_id: string;
        name: string;
        created_at: string;
        updated_at: string;
    };
    type WebhookPayloadProjectColumn = {
        action: "created" | "deleted" | "edited" | "moved";
        project_column: WebhookPayloadProjectColumnProjectColumn;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadProjectColumnInstallation;
    };
    type WebhookPayloadProjectCardOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
        name: string;
        company: null;
        blog: null;
        location: null;
        email: null;
        twitter_username: null;
        is_verified: boolean;
        has_organization_projects: boolean;
        has_repository_projects: boolean;
        public_repos: number;
        public_gists: number;
        followers: number;
        following: number;
        html_url: string;
        created_at: string;
        updated_at: string;
        type: string;
    };
    type WebhookPayloadProjectCardInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadProjectCardProjectCardCreator = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadProjectCardProjectCard = {
        url: string;
        project_url: string;
        column_url: string;
        column_id: number;
        id: number;
        node_id: string;
        note: string;
        archived: boolean;
        creator: WebhookPayloadProjectCardProjectCardCreator;
        created_at: string;
        updated_at: string;
    };
    type WebhookPayloadProjectCard = {
        action: "converted" | "created" | "deleted" | "edited" | "moved";
        project_card: WebhookPayloadProjectCardProjectCard;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadProjectCardInstallation;
        organization?: WebhookPayloadProjectCardOrganization;
    };
    type WebhookPayloadPingOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
    };
    type WebhookPayloadPingHookLastResponse = {
        code: null;
        status: string;
        message: null;
    };
    type WebhookPayloadPingHookConfig = {
        content_type: string;
        url: string;
        insecure_ssl: string;
        secret?: string;
    };
    type WebhookPayloadPingHook = {
        type: string;
        id: number;
        name: string;
        active: boolean;
        events: Array<string>;
        config: WebhookPayloadPingHookConfig;
        updated_at: string;
        created_at: string;
        url: string;
        test_url?: string;
        ping_url: string;
        last_response?: WebhookPayloadPingHookLastResponse;
    };
    type WebhookPayloadPing = {
        zen: string;
        hook_id: number;
        hook: WebhookPayloadPingHook;
        repository?: PayloadRepository;
        sender: PayloadSender;
        organization?: WebhookPayloadPingOrganization;
    };
    type WebhookPayloadPageBuildInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadPageBuildBuildPusher = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPageBuildBuildError = {
        message: null;
    };
    type WebhookPayloadPageBuildBuild = {
        url: string;
        status: string;
        error: WebhookPayloadPageBuildBuildError;
        pusher: WebhookPayloadPageBuildBuildPusher;
        commit: string;
        duration: number;
        created_at: string;
        updated_at: string;
    };
    type WebhookPayloadPageBuild = {
        id: number;
        build: WebhookPayloadPageBuildBuild;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadPageBuildInstallation;
    };
    type WebhookPayloadPackagePackageRegistry = {
        about_url: string;
        name: string;
        type: string;
        url: string;
        vendor: string;
    };
    type WebhookPayloadPackagePackagePackageVersionAuthor = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPackagePackagePackageVersionPackageFilesItem = {
        download_url: string;
        id: number;
        name: string;
        sha256: string;
        sha1: string;
        md5: string;
        content_type: string;
        state: string;
        size: number;
        created_at: string;
        updated_at: string;
    };
    type WebhookPayloadPackagePackagePackageVersionReleaseAuthor = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPackagePackagePackageVersionRelease = {
        url: string;
        html_url: string;
        id: number;
        tag_name: string;
        target_commitish: string;
        name: string;
        draft: boolean;
        author: WebhookPayloadPackagePackagePackageVersionReleaseAuthor;
        prerelease: boolean;
        created_at: string;
        published_at: string;
    };
    type WebhookPayloadPackagePackagePackageVersion = {
        id: number;
        version: string;
        summary: string;
        body: string;
        body_html: string;
        release: WebhookPayloadPackagePackagePackageVersionRelease;
        manifest: string;
        html_url: string;
        tag_name: string;
        target_commitish: string;
        target_oid: string;
        draft: boolean;
        prerelease: boolean;
        created_at: string;
        updated_at: string;
        metadata: Array<any>;
        package_files: Array<WebhookPayloadPackagePackagePackageVersionPackageFilesItem>;
        author: WebhookPayloadPackagePackagePackageVersionAuthor;
        installation_command: string;
    };
    type WebhookPayloadPackagePackageOwner = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadPackagePackage = {
        id: number;
        name: string;
        package_type: string;
        html_url: string;
        created_at: string;
        updated_at: string;
        owner: WebhookPayloadPackagePackageOwner;
        package_version: WebhookPayloadPackagePackagePackageVersion;
        registry: WebhookPayloadPackagePackageRegistry;
    };
    type WebhookPayloadPackage = {
        action: "published" | "updated";
        package: WebhookPayloadPackagePackage;
        repository: PayloadRepository;
        sender: PayloadSender;
    };
    type WebhookPayloadOrgBlockInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadOrgBlockOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
    };
    type WebhookPayloadOrgBlockBlockedUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadOrgBlock = {
        action: "blocked" | "unblocked";
        blocked_user: WebhookPayloadOrgBlockBlockedUser;
        organization: WebhookPayloadOrgBlockOrganization;
        sender: PayloadSender;
        installation?: WebhookPayloadOrgBlockInstallation;
    };
    type WebhookPayloadOrganizationInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadOrganizationOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
    };
    type WebhookPayloadOrganizationMembershipUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadOrganizationMembership = {
        url: string;
        state: string;
        role: string;
        organization_url: string;
        user: WebhookPayloadOrganizationMembershipUser;
    };
    type WebhookPayloadOrganization = {
        action: "deleted" | "member_added" | "member_invited" | "member_removed" | "renamed";
        membership: WebhookPayloadOrganizationMembership;
        organization: WebhookPayloadOrganizationOrganization;
        sender: PayloadSender;
        installation?: WebhookPayloadOrganizationInstallation;
    };
    type WebhookPayloadMilestoneInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadMilestoneMilestoneCreator = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadMilestoneMilestone = {
        url: string;
        html_url: string;
        labels_url: string;
        id: number;
        node_id: string;
        number: number;
        title: string;
        description: string;
        creator: WebhookPayloadMilestoneMilestoneCreator;
        open_issues: number;
        closed_issues: number;
        state: string;
        created_at: string;
        updated_at: string;
        due_on: string;
        closed_at: null | string;
    };
    type WebhookPayloadMilestone = {
        action: "closed" | "created" | "deleted" | "edited" | "opened";
        milestone: WebhookPayloadMilestoneMilestone;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadMilestoneInstallation;
    };
    type WebhookPayloadMetaHookConfig = {
        content_type: string;
        insecure_ssl: string;
        url: string;
    };
    type WebhookPayloadMetaHook = {
        type: string;
        id: number;
        name: string;
        active: boolean;
        events: Array<string>;
        config: WebhookPayloadMetaHookConfig;
        updated_at: string;
        created_at: string;
    };
    type WebhookPayloadMeta = {
        action: "deleted";
        hook_id: number;
        hook: WebhookPayloadMetaHook;
        repository: PayloadRepository;
        sender: PayloadSender;
    };
    type WebhookPayloadMembershipInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadMembershipOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
    };
    type WebhookPayloadMembershipTeam = {
        name: string;
        id: number;
        node_id: string;
        slug: string;
        description: string;
        privacy: string;
        url: string;
        html_url: string;
        members_url: string;
        repositories_url: string;
        permission: string;
    };
    type WebhookPayloadMembershipMember = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadMembership = {
        action: "added" | "removed";
        scope: string;
        member: WebhookPayloadMembershipMember;
        sender: PayloadSender;
        team: WebhookPayloadMembershipTeam;
        organization: WebhookPayloadMembershipOrganization;
        installation?: WebhookPayloadMembershipInstallation;
    };
    type WebhookPayloadMemberChangesPermission = {
        from: string;
    };
    type WebhookPayloadMemberChanges = {
        permission: WebhookPayloadMemberChangesPermission;
    };
    type WebhookPayloadMemberInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadMemberMember = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadMember = {
        action: "added" | "edited" | "removed";
        member: WebhookPayloadMemberMember;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadMemberInstallation;
        changes?: WebhookPayloadMemberChanges;
    };
    type WebhookPayloadMarketplacePurchasePreviousMarketplacePurchasePlan = {
        id: number;
        name: string;
        description: string;
        monthly_price_in_cents: number;
        yearly_price_in_cents: number;
        price_model: string;
        has_free_trial: boolean;
        unit_name: string;
        bullets: Array<string>;
    };
    type WebhookPayloadMarketplacePurchasePreviousMarketplacePurchaseAccount = {
        type: string;
        id: number;
        login: string;
        organization_billing_email: string;
    };
    type WebhookPayloadMarketplacePurchasePreviousMarketplacePurchase = {
        account: WebhookPayloadMarketplacePurchasePreviousMarketplacePurchaseAccount;
        billing_cycle: string;
        on_free_trial: boolean;
        free_trial_ends_on: null;
        unit_count: number;
        plan: WebhookPayloadMarketplacePurchasePreviousMarketplacePurchasePlan;
    };
    type WebhookPayloadMarketplacePurchaseMarketplacePurchasePlan = {
        id: number;
        name: string;
        description: string;
        monthly_price_in_cents: number;
        yearly_price_in_cents: number;
        price_model: string;
        has_free_trial: boolean;
        unit_name: string | null;
        bullets: Array<string>;
    };
    type WebhookPayloadMarketplacePurchaseMarketplacePurchaseAccount = {
        type: string;
        id: number;
        node_id?: string;
        login: string;
        organization_billing_email: string;
    };
    type WebhookPayloadMarketplacePurchaseMarketplacePurchase = {
        account: WebhookPayloadMarketplacePurchaseMarketplacePurchaseAccount;
        billing_cycle: string;
        unit_count: number;
        on_free_trial: boolean;
        free_trial_ends_on: null;
        next_billing_date: string;
        plan: WebhookPayloadMarketplacePurchaseMarketplacePurchasePlan;
    };
    type WebhookPayloadMarketplacePurchaseSender = {
        login: string;
        id: number;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
        email: string;
    };
    type WebhookPayloadMarketplacePurchase = {
        action: "cancelled" | "changed" | "pending_change" | "pending_change_cancelled" | "purchased";
        effective_date: string;
        sender: WebhookPayloadMarketplacePurchaseSender;
        marketplace_purchase: WebhookPayloadMarketplacePurchaseMarketplacePurchase;
        previous_marketplace_purchase?: WebhookPayloadMarketplacePurchasePreviousMarketplacePurchase;
    };
    type WebhookPayloadLabelChangesColor = {
        from: string;
    };
    type WebhookPayloadLabelChanges = {
        color: WebhookPayloadLabelChangesColor;
    };
    type WebhookPayloadLabelInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadLabelLabel = {
        id: number;
        node_id: string;
        url: string;
        name: string;
        color: string;
        default: boolean;
    };
    type WebhookPayloadLabel = {
        action: "created" | "deleted" | "edited";
        label: WebhookPayloadLabelLabel;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadLabelInstallation;
        changes?: WebhookPayloadLabelChanges;
    };
    type WebhookPayloadIssuesLabel = {
        id: number;
        node_id: string;
        url: string;
        name: string;
        color: string;
        default: boolean;
    };
    type WebhookPayloadIssuesIssuePullRequest = {
        url: string;
        html_url: string;
        diff_url: string;
        patch_url: string;
    };
    type WebhookPayloadIssuesOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
        name: string;
        company: null;
        blog: null;
        location: null;
        email: null;
        twitter_username: null;
        is_verified: boolean;
        has_organization_projects: boolean;
        has_repository_projects: boolean;
        public_repos: number;
        public_gists: number;
        followers: number;
        following: number;
        html_url: string;
        created_at: string;
        updated_at: string;
        type: string;
    };
    type WebhookPayloadIssuesInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadIssuesAssignee = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadIssuesChanges = {};
    type WebhookPayloadIssuesIssueMilestoneCreator = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadIssuesIssueMilestone = {
        url: string;
        html_url: string;
        labels_url: string;
        id: number;
        node_id: string;
        number: number;
        title: string;
        description: string;
        creator: WebhookPayloadIssuesIssueMilestoneCreator;
        open_issues: number;
        closed_issues: number;
        state: string;
        created_at: string;
        updated_at: string;
        due_on: string;
        closed_at: string;
    } | null;
    type WebhookPayloadIssuesIssueAssigneesItem = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadIssuesIssueAssignee = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    } | null;
    type WebhookPayloadIssuesIssueLabelsItem = {
        id: number;
        node_id: string;
        url: string;
        name: string;
        color: string;
        default: boolean;
    };
    type WebhookPayloadIssuesIssueUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadIssuesIssue = {
        url: string;
        repository_url: string;
        labels_url: string;
        comments_url: string;
        events_url: string;
        html_url: string;
        id: number;
        node_id: string;
        number: number;
        title: string;
        user: WebhookPayloadIssuesIssueUser;
        labels: Array<WebhookPayloadIssuesIssueLabelsItem>;
        state: string;
        locked: boolean;
        assignee: WebhookPayloadIssuesIssueAssignee;
        assignees: Array<WebhookPayloadIssuesIssueAssigneesItem>;
        milestone: WebhookPayloadIssuesIssueMilestone;
        comments: number;
        created_at: string;
        updated_at: string;
        closed_at: null;
        author_association: string;
        body: string;
        pull_request?: WebhookPayloadIssuesIssuePullRequest;
    };
    type WebhookPayloadIssues = {
        action: "assigned" | "closed" | "deleted" | "demilestoned" | "edited" | "labeled" | "locked" | "milestoned" | "opened" | "pinned" | "reopened" | "transferred" | "unassigned" | "unlabeled" | "unlocked" | "unpinned";
        issue: WebhookPayloadIssuesIssue;
        changes?: WebhookPayloadIssuesChanges;
        repository: PayloadRepository;
        sender: PayloadSender;
        assignee?: WebhookPayloadIssuesAssignee;
        installation?: WebhookPayloadIssuesInstallation;
        organization?: WebhookPayloadIssuesOrganization;
        label?: WebhookPayloadIssuesLabel;
    };
    type WebhookPayloadIssueCommentChangesBody = {
        from: string;
    };
    type WebhookPayloadIssueCommentChanges = {
        body: WebhookPayloadIssueCommentChangesBody;
    };
    type WebhookPayloadIssueCommentInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadIssueCommentOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
        name: string;
        company: null;
        blog: null;
        location: null;
        email: null;
        twitter_username: null;
        is_verified: boolean;
        has_organization_projects: boolean;
        has_repository_projects: boolean;
        public_repos: number;
        public_gists: number;
        followers: number;
        following: number;
        html_url: string;
        created_at: string;
        updated_at: string;
        type: string;
    };
    type WebhookPayloadIssueCommentCommentUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadIssueCommentComment = {
        url: string;
        html_url: string;
        issue_url: string;
        id: number;
        node_id: string;
        user: WebhookPayloadIssueCommentCommentUser;
        created_at: string;
        updated_at: string;
        author_association: string;
        body: string;
    };
    type WebhookPayloadIssueCommentIssueMilestoneCreator = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadIssueCommentIssueMilestone = {
        url: string;
        html_url: string;
        labels_url: string;
        id: number;
        node_id: string;
        number: number;
        title: string;
        description: string;
        creator: WebhookPayloadIssueCommentIssueMilestoneCreator;
        open_issues: number;
        closed_issues: number;
        state: string;
        created_at: string;
        updated_at: string;
        due_on: string;
        closed_at: string;
    };
    type WebhookPayloadIssueCommentIssueAssigneesItem = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadIssueCommentIssueAssignee = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadIssueCommentIssueLabelsItem = {
        id: number;
        node_id: string;
        url: string;
        name: string;
        color: string;
        default: boolean;
    };
    type WebhookPayloadIssueCommentIssueUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadIssueCommentIssue = {
        url: string;
        repository_url: string;
        labels_url: string;
        comments_url: string;
        events_url: string;
        html_url: string;
        id: number;
        node_id: string;
        number: number;
        title: string;
        user: WebhookPayloadIssueCommentIssueUser;
        labels: Array<WebhookPayloadIssueCommentIssueLabelsItem>;
        state: string;
        locked: boolean;
        assignee: WebhookPayloadIssueCommentIssueAssignee;
        assignees: Array<WebhookPayloadIssueCommentIssueAssigneesItem>;
        milestone: WebhookPayloadIssueCommentIssueMilestone;
        comments: number;
        created_at: string;
        updated_at: string;
        closed_at: null;
        author_association: string;
        body: string;
    };
    type WebhookPayloadIssueComment = {
        action: "created" | "deleted" | "edited";
        issue: WebhookPayloadIssueCommentIssue;
        comment: WebhookPayloadIssueCommentComment;
        repository: PayloadRepository;
        sender: PayloadSender;
        organization?: WebhookPayloadIssueCommentOrganization;
        installation?: WebhookPayloadIssueCommentInstallation;
        changes?: WebhookPayloadIssueCommentChanges;
    };
    type WebhookPayloadInstallationRepositoriesRepositoriesRemovedItem = {
        id: number;
        name: string;
        full_name: string;
        private: boolean;
    };
    type WebhookPayloadInstallationRepositoriesRepositoriesAddedItem = {
        id: number;
        node_id: string;
        name: string;
        full_name: string;
        private: boolean;
    };
    type WebhookPayloadInstallationRepositoriesInstallationPermissions = {
        administration?: string;
        statuses?: string;
        repository_projects?: string;
        repository_hooks?: string;
        pull_requests?: string;
        pages?: string;
        issues: string;
        deployments?: string;
        contents: string;
        checks?: string;
        metadata: string;
        vulnerability_alerts?: string;
    };
    type WebhookPayloadInstallationRepositoriesInstallationAccount = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadInstallationRepositoriesInstallation = {
        id: number;
        account: WebhookPayloadInstallationRepositoriesInstallationAccount;
        repository_selection: string;
        access_tokens_url: string;
        repositories_url: string;
        html_url: string;
        app_id: number;
        target_id: number;
        target_type: string;
        permissions: WebhookPayloadInstallationRepositoriesInstallationPermissions;
        events: Array<string>;
        created_at: number;
        updated_at: number;
        single_file_name: null | string;
    };
    type WebhookPayloadInstallationRepositories = {
        action: "added" | "removed";
        installation: WebhookPayloadInstallationRepositoriesInstallation;
        repository_selection: string;
        repositories_added: Array<WebhookPayloadInstallationRepositoriesRepositoriesAddedItem>;
        repositories_removed: Array<WebhookPayloadInstallationRepositoriesRepositoriesRemovedItem>;
        sender: PayloadSender;
    };
    type WebhookPayloadInstallationRepositoriesItem = {
        id: number;
        node_id: string;
        name: string;
        full_name: string;
        private: boolean;
    };
    type WebhookPayloadInstallationInstallationPermissions = {
        metadata: string;
        contents: string;
        issues: string;
        administration?: string;
        checks?: string;
        deployments?: string;
        pages?: string;
        pull_requests?: string;
        repository_hooks?: string;
        repository_projects?: string;
        statuses?: string;
        vulnerability_alerts?: string;
    };
    type WebhookPayloadInstallationInstallationAccount = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadInstallationInstallation = {
        id: number;
        account: WebhookPayloadInstallationInstallationAccount;
        repository_selection: string;
        access_tokens_url: string;
        repositories_url: string;
        html_url: string;
        app_id: number;
        target_id: number;
        target_type: string;
        permissions: WebhookPayloadInstallationInstallationPermissions;
        events: Array<string>;
        created_at: number;
        updated_at: number;
        single_file_name: string | null;
    };
    type WebhookPayloadInstallation = {
        action: "created" | "deleted" | "new_permissions_accepted" | "suspend" | "unsuspend";
        installation: WebhookPayloadInstallationInstallation;
        repositories: Array<WebhookPayloadInstallationRepositoriesItem>;
        sender: PayloadSender;
    };
    type WebhookPayloadGollumInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadGollumPagesItem = {
        page_name: string;
        title: string;
        summary: null;
        action: string;
        sha: string;
        html_url: string;
    };
    type WebhookPayloadGollum = {
        pages: Array<WebhookPayloadGollumPagesItem>;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadGollumInstallation;
    };
    type WebhookPayloadGithubAppAuthorization = {
        action: "revoked";
        sender: PayloadSender;
    };
    type WebhookPayloadForkInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadForkForkeeOwner = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadForkForkee = {
        id: number;
        node_id: string;
        name: string;
        full_name: string;
        private: boolean;
        owner: WebhookPayloadForkForkeeOwner;
        html_url: string;
        description: null;
        fork: boolean;
        url: string;
        forks_url: string;
        keys_url: string;
        collaborators_url: string;
        teams_url: string;
        hooks_url: string;
        issue_events_url: string;
        events_url: string;
        assignees_url: string;
        branches_url: string;
        tags_url: string;
        blobs_url: string;
        git_tags_url: string;
        git_refs_url: string;
        trees_url: string;
        statuses_url: string;
        languages_url: string;
        stargazers_url: string;
        contributors_url: string;
        subscribers_url: string;
        subscription_url: string;
        commits_url: string;
        git_commits_url: string;
        comments_url: string;
        issue_comment_url: string;
        contents_url: string;
        compare_url: string;
        merges_url: string;
        archive_url: string;
        downloads_url: string;
        issues_url: string;
        pulls_url: string;
        milestones_url: string;
        notifications_url: string;
        labels_url: string;
        releases_url: string;
        deployments_url: string;
        created_at: string;
        updated_at: string;
        pushed_at: string;
        git_url: string;
        ssh_url: string;
        clone_url: string;
        svn_url: string;
        homepage: null;
        size: number;
        stargazers_count: number;
        watchers_count: number;
        language: null;
        has_issues: boolean;
        has_projects: boolean;
        has_downloads: boolean;
        has_wiki: boolean;
        has_pages: boolean;
        forks_count: number;
        mirror_url: null;
        archived: boolean;
        disabled: boolean;
        open_issues_count: number;
        license: null;
        forks: number;
        open_issues: number;
        watchers: number;
        default_branch: string;
        public: boolean;
    };
    type WebhookPayloadFork = {
        forkee: WebhookPayloadForkForkee;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadForkInstallation;
    };
    type WebhookPayloadDeploymentStatusInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadDeploymentStatusDeploymentCreator = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadDeploymentStatusDeploymentPayload = {};
    type WebhookPayloadDeploymentStatusDeployment = {
        url: string;
        id: number;
        node_id: string;
        sha: string;
        ref: string;
        task: string;
        payload: WebhookPayloadDeploymentStatusDeploymentPayload;
        original_environment: string;
        environment: string;
        description: null;
        creator: WebhookPayloadDeploymentStatusDeploymentCreator;
        created_at: string;
        updated_at: string;
        statuses_url: string;
        repository_url: string;
    };
    type WebhookPayloadDeploymentStatusDeploymentStatusCreator = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadDeploymentStatusDeploymentStatus = {
        url: string;
        id: number;
        node_id: string;
        state: string;
        creator: WebhookPayloadDeploymentStatusDeploymentStatusCreator;
        description: string;
        environment: string;
        target_url: string;
        created_at: string;
        updated_at: string;
        deployment_url: string;
        repository_url: string;
    };
    type WebhookPayloadDeploymentStatus = {
        action: "created";
        deployment_status: WebhookPayloadDeploymentStatusDeploymentStatus;
        deployment: WebhookPayloadDeploymentStatusDeployment;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadDeploymentStatusInstallation;
    };
    type WebhookPayloadDeploymentInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadDeploymentDeploymentCreator = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadDeploymentDeploymentPayload = {};
    type WebhookPayloadDeploymentDeployment = {
        url: string;
        id: number;
        node_id: string;
        sha: string;
        ref: string;
        task: string;
        payload: WebhookPayloadDeploymentDeploymentPayload;
        original_environment: string;
        environment: string;
        description: null;
        creator: WebhookPayloadDeploymentDeploymentCreator;
        created_at: string;
        updated_at: string;
        statuses_url: string;
        repository_url: string;
    };
    type WebhookPayloadDeployment = {
        action: "created";
        deployment: WebhookPayloadDeploymentDeployment;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadDeploymentInstallation;
    };
    type WebhookPayloadDeployKeyKey = {
        id: number;
        key: string;
        url: string;
        title: string;
        verified: boolean;
        created_at: string;
        read_only: boolean;
    };
    type WebhookPayloadDeployKey = {
        action: "created" | "deleted";
        key: WebhookPayloadDeployKeyKey;
        repository: PayloadRepository;
        sender: PayloadSender;
    };
    type WebhookPayloadDeleteOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
        name: string;
        company: null;
        blog: null;
        location: null;
        email: null;
        twitter_username: null;
        is_verified: boolean;
        has_organization_projects: boolean;
        has_repository_projects: boolean;
        public_repos: number;
        public_gists: number;
        followers: number;
        following: number;
        html_url: string;
        created_at: string;
        updated_at: string;
        type: string;
    };
    type WebhookPayloadDeleteInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadDelete = {
        ref: string;
        ref_type: string;
        pusher_type: string;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadDeleteInstallation;
        organization?: WebhookPayloadDeleteOrganization;
    };
    type WebhookPayloadCreateOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
        name: string;
        company: null;
        blog: null;
        location: null;
        email: null;
        twitter_username: null;
        is_verified: boolean;
        has_organization_projects: boolean;
        has_repository_projects: boolean;
        public_repos: number;
        public_gists: number;
        followers: number;
        following: number;
        html_url: string;
        created_at: string;
        updated_at: string;
        type: string;
    };
    type WebhookPayloadCreateInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadCreate = {
        ref: string;
        ref_type: string;
        master_branch: string;
        description: null;
        pusher_type: string;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation?: WebhookPayloadCreateInstallation;
        organization?: WebhookPayloadCreateOrganization;
    };
    type WebhookPayloadContentReferenceInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadContentReferenceContentReference = {
        id: number;
        node_id: string;
        reference: string;
    };
    type WebhookPayloadContentReference = {
        action: "created";
        content_reference: WebhookPayloadContentReferenceContentReference;
        repository: PayloadRepository;
        sender: PayloadSender;
        installation: WebhookPayloadContentReferenceInstallation;
    };
    type WebhookPayloadCommitCommentInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadCommitCommentOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
        name: string;
        company: null;
        blog: null;
        location: null;
        email: null;
        twitter_username: null;
        is_verified: boolean;
        has_organization_projects: boolean;
        has_repository_projects: boolean;
        public_repos: number;
        public_gists: number;
        followers: number;
        following: number;
        html_url: string;
        created_at: string;
        updated_at: string;
        type: string;
    };
    type WebhookPayloadCommitCommentCommentUser = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadCommitCommentComment = {
        url: string;
        html_url: string;
        id: number;
        node_id: string;
        user: WebhookPayloadCommitCommentCommentUser;
        position: null;
        line: null;
        path: null;
        commit_id: string;
        created_at: string;
        updated_at: string;
        author_association: string;
        body: string;
    };
    type WebhookPayloadCommitComment = {
        action: "created";
        comment: WebhookPayloadCommitCommentComment;
        repository: PayloadRepository;
        sender: PayloadSender;
        organization?: WebhookPayloadCommitCommentOrganization;
        installation?: WebhookPayloadCommitCommentInstallation;
    };
    type WebhookPayloadCodeScanningAlertInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadCodeScanningAlertOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
    };
    type WebhookPayloadCodeScanningAlertAlertTool = {
        name: string;
        version: null;
    };
    type WebhookPayloadCodeScanningAlertAlertRule = {
        id: string;
        severity: string;
        description: string;
    };
    type WebhookPayloadCodeScanningAlertAlertInstancesItem = {
        ref: string;
        analysis_key: string;
        environment: string;
        state: string;
    };
    type WebhookPayloadCodeScanningAlertAlert = {
        number: number;
        created_at: string;
        url: string;
        html_url: string;
        instances: Array<WebhookPayloadCodeScanningAlertAlertInstancesItem>;
        state: string;
        dismissed_by: null;
        dismissed_at: null;
        dismissed_reason: null;
        rule: WebhookPayloadCodeScanningAlertAlertRule;
        tool: WebhookPayloadCodeScanningAlertAlertTool;
    };
    type WebhookPayloadCodeScanningAlert = {
        action: "appeared_in_branch" | "closed_by_user" | "created" | "fixed" | "reopened" | "reopened_by_user";
        alert: WebhookPayloadCodeScanningAlertAlert;
        ref: string;
        commit_oid: string;
        repository: PayloadRepository;
        organization: WebhookPayloadCodeScanningAlertOrganization;
        installation?: WebhookPayloadCodeScanningAlertInstallation;
    };
    type WebhookPayloadCheckSuiteInstallation = {
        id: number;
        node_id: string;
    };
    type WebhookPayloadCheckSuiteOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
        name: string;
        company: null;
        blog: null;
        location: null;
        email: null;
        twitter_username: null;
        is_verified: boolean;
        has_organization_projects: boolean;
        has_repository_projects: boolean;
        public_repos: number;
        public_gists: number;
        followers: number;
        following: number;
        html_url: string;
        created_at: string;
        updated_at: string;
        type: string;
    };
    type WebhookPayloadCheckSuiteCheckSuiteHeadCommitCommitter = {
        name: string;
        email: string;
    };
    type WebhookPayloadCheckSuiteCheckSuiteHeadCommitAuthor = {
        name: string;
        email: string;
    };
    type WebhookPayloadCheckSuiteCheckSuiteHeadCommit = {
        id: string;
        tree_id: string;
        message: string;
        timestamp: string;
        author: WebhookPayloadCheckSuiteCheckSuiteHeadCommitAuthor;
        committer: WebhookPayloadCheckSuiteCheckSuiteHeadCommitCommitter;
    };
    type WebhookPayloadCheckSuiteCheckSuiteAppPermissions = {
        administration: string;
        checks: string;
        contents: string;
        deployments: string;
        issues: string;
        members: string;
        metadata: string;
        organization_administration: string;
        organization_hooks: string;
        organization_plan: string;
        organization_projects: string;
        organization_user_blocking: string;
        pages: string;
        pull_requests: string;
        repository_hooks: string;
        repository_projects: string;
        statuses: string;
        team_discussions: string;
        vulnerability_alerts: string;
    };
    type WebhookPayloadCheckSuiteCheckSuiteAppOwner = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadCheckSuiteCheckSuiteApp = {
        id: number;
        node_id: string;
        owner: WebhookPayloadCheckSuiteCheckSuiteAppOwner;
        name: string;
        description: string;
        external_url: string;
        html_url: string;
        created_at: string;
        updated_at: string;
        permissions: WebhookPayloadCheckSuiteCheckSuiteAppPermissions;
        events: Array<any>;
    };
    type WebhookPayloadCheckSuiteCheckSuitePullRequestsItemBaseRepo = {
        id: number;
        url: string;
        name: string;
    };
    type WebhookPayloadCheckSuiteCheckSuitePullRequestsItemBase = {
        ref: string;
        sha: string;
        repo: WebhookPayloadCheckSuiteCheckSuitePullRequestsItemBaseRepo;
    };
    type WebhookPayloadCheckSuiteCheckSuitePullRequestsItemHeadRepo = {
        id: number;
        url: string;
        name: string;
    };
    type WebhookPayloadCheckSuiteCheckSuitePullRequestsItemHead = {
        ref: string;
        sha: string;
        repo: WebhookPayloadCheckSuiteCheckSuitePullRequestsItemHeadRepo;
    };
    type WebhookPayloadCheckSuiteCheckSuitePullRequestsItem = {
        url: string;
        id: number;
        number: number;
        head: WebhookPayloadCheckSuiteCheckSuitePullRequestsItemHead;
        base: WebhookPayloadCheckSuiteCheckSuitePullRequestsItemBase;
    };
    type WebhookPayloadCheckSuiteCheckSuite = {
        id: number;
        node_id: string;
        head_branch: string;
        head_sha: string;
        status: string;
        conclusion: string | null;
        url: string;
        before: string;
        after: string;
        pull_requests: Array<WebhookPayloadCheckSuiteCheckSuitePullRequestsItem>;
        app: WebhookPayloadCheckSuiteCheckSuiteApp;
        created_at: string;
        updated_at: string;
        latest_check_runs_count: number;
        check_runs_url: string;
        head_commit: WebhookPayloadCheckSuiteCheckSuiteHeadCommit;
    };
    type WebhookPayloadCheckSuite = {
        action: "completed" | "requested" | "rerequested";
        check_suite: WebhookPayloadCheckSuiteCheckSuite;
        repository: PayloadRepository;
        sender: PayloadSender;
        organization?: WebhookPayloadCheckSuiteOrganization;
        installation?: WebhookPayloadCheckSuiteInstallation;
    };
    type WebhookPayloadCheckRunInstallation = {
        id: number;
        node_id: string;
    };
    type PayloadRepositoryLicense = null | {
        key: string;
        name: string;
        spdx_id: string;
        url: string;
        node_id: string;
    };
    type WebhookPayloadCheckRunRequestedAction = {
        identifier: string;
    };
    type WebhookPayloadCheckRunOrganization = {
        login: string;
        id: number;
        node_id: string;
        url: string;
        repos_url: string;
        events_url: string;
        hooks_url: string;
        issues_url: string;
        members_url: string;
        public_members_url: string;
        avatar_url: string;
        description: string;
        name?: string;
        company?: null;
        blog?: null;
        location?: null;
        email?: null;
        twitter_username?: null;
        is_verified?: boolean;
        has_organization_projects?: boolean;
        has_repository_projects?: boolean;
        public_repos?: number;
        public_gists?: number;
        followers?: number;
        following?: number;
        html_url?: string;
        created_at?: string;
        updated_at?: string;
        type?: string;
    };
    type PayloadSender = {
        login: string;
        id: number;
        node_id?: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
        email?: string;
    };
    type PayloadRepositoryOwner = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
        name?: string;
        email?: string;
    };
    type PayloadRepository = {
        id: number;
        node_id: string;
        name: string;
        full_name: string;
        private: boolean;
        owner: PayloadRepositoryOwner;
        html_url: string;
        description: null | string;
        fork: boolean;
        url: string;
        forks_url: string;
        keys_url: string;
        collaborators_url: string;
        teams_url: string;
        hooks_url: string;
        issue_events_url: string;
        events_url: string;
        assignees_url: string;
        branches_url: string;
        tags_url: string;
        blobs_url: string;
        git_tags_url: string;
        git_refs_url: string;
        trees_url: string;
        statuses_url: string;
        languages_url: string;
        stargazers_url: string;
        contributors_url: string;
        subscribers_url: string;
        subscription_url: string;
        commits_url: string;
        git_commits_url: string;
        comments_url: string;
        issue_comment_url: string;
        contents_url: string;
        compare_url: string;
        merges_url: string;
        archive_url: string;
        downloads_url: string;
        issues_url: string;
        pulls_url: string;
        milestones_url: string;
        notifications_url: string;
        labels_url: string;
        releases_url: string;
        deployments_url: string;
        created_at: string | number;
        updated_at: string;
        pushed_at: string | number;
        git_url: string;
        ssh_url: string;
        clone_url: string;
        svn_url: string;
        homepage: null | string;
        size: number;
        stargazers_count: number;
        watchers_count: number;
        language: string | null;
        has_issues: boolean;
        has_projects: boolean;
        has_downloads: boolean;
        has_wiki: boolean;
        has_pages: boolean;
        forks_count: number;
        mirror_url: null;
        archived: boolean;
        disabled?: boolean;
        open_issues_count: number;
        license: PayloadRepositoryLicense;
        forks: number;
        open_issues: number;
        watchers: number;
        default_branch: string;
        stargazers?: number;
        master_branch?: string;
        permissions?: PayloadRepositoryPermissions;
    };
    type WebhookPayloadCheckRunCheckRunPullRequestsItemBaseRepo = {
        id: number;
        url: string;
        name: string;
    };
    type WebhookPayloadCheckRunCheckRunPullRequestsItemBase = {
        ref: string;
        sha: string;
        repo: WebhookPayloadCheckRunCheckRunPullRequestsItemBaseRepo;
    };
    type WebhookPayloadCheckRunCheckRunPullRequestsItemHeadRepo = {
        id: number;
        url: string;
        name: string;
    };
    type WebhookPayloadCheckRunCheckRunPullRequestsItemHead = {
        ref: string;
        sha: string;
        repo: WebhookPayloadCheckRunCheckRunPullRequestsItemHeadRepo;
    };
    type WebhookPayloadCheckRunCheckRunPullRequestsItem = {
        url: string;
        id: number;
        number: number;
        head: WebhookPayloadCheckRunCheckRunPullRequestsItemHead;
        base: WebhookPayloadCheckRunCheckRunPullRequestsItemBase;
    };
    type WebhookPayloadCheckRunCheckRunAppPermissions = {
        administration?: string;
        checks: string;
        contents?: string;
        deployments?: string;
        issues?: string;
        members: string;
        metadata: string;
        organization_administration?: string;
        organization_hooks?: string;
        organization_plan?: string;
        organization_projects?: string;
        organization_user_blocking?: string;
        pages?: string;
        pull_requests: string;
        repository_hooks?: string;
        repository_projects?: string;
        statuses?: string;
        team_discussions?: string;
        vulnerability_alerts?: string;
    };
    type WebhookPayloadCheckRunCheckRunAppOwner = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadCheckRunCheckRunApp = {
        id: number;
        node_id: string;
        owner: WebhookPayloadCheckRunCheckRunAppOwner;
        name: string;
        description: string | null;
        external_url: string;
        html_url: string;
        created_at: string;
        updated_at: string;
        permissions?: WebhookPayloadCheckRunCheckRunAppPermissions;
        events?: Array<string>;
        slug?: string;
    };
    type WebhookPayloadCheckRunCheckRunCheckSuiteAppPermissions = {
        administration?: string;
        checks: string;
        contents?: string;
        deployments?: string;
        issues?: string;
        members: string;
        metadata: string;
        organization_administration?: string;
        organization_hooks?: string;
        organization_plan?: string;
        organization_projects?: string;
        organization_user_blocking?: string;
        pages?: string;
        pull_requests: string;
        repository_hooks?: string;
        repository_projects?: string;
        statuses?: string;
        team_discussions?: string;
        vulnerability_alerts?: string;
    };
    type WebhookPayloadCheckRunCheckRunCheckSuiteAppOwner = {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
    };
    type WebhookPayloadCheckRunCheckRunCheckSuiteApp = {
        id: number;
        node_id: string;
        owner: WebhookPayloadCheckRunCheckRunCheckSuiteAppOwner;
        name: string;
        description: string | null;
        external_url: string;
        html_url: string;
        created_at: string;
        updated_at: string;
        permissions?: WebhookPayloadCheckRunCheckRunCheckSuiteAppPermissions;
        events?: Array<string>;
        slug?: string;
    };
    type WebhookPayloadCheckRunCheckRunCheckSuitePullRequestsItemBaseRepo = {
        id: number;
        url: string;
        name: string;
    };
    type WebhookPayloadCheckRunCheckRunCheckSuitePullRequestsItemBase = {
        ref: string;
        sha: string;
        repo: WebhookPayloadCheckRunCheckRunCheckSuitePullRequestsItemBaseRepo;
    };
    type WebhookPayloadCheckRunCheckRunCheckSuitePullRequestsItemHeadRepo = {
        id: number;
        url: string;
        name: string;
    };
    type WebhookPayloadCheckRunCheckRunCheckSuitePullRequestsItemHead = {
        ref: string;
        sha: string;
        repo: WebhookPayloadCheckRunCheckRunCheckSuitePullRequestsItemHeadRepo;
    };
    type WebhookPayloadCheckRunCheckRunCheckSuitePullRequestsItem = {
        url: string;
        id: number;
        number: number;
        head: WebhookPayloadCheckRunCheckRunCheckSuitePullRequestsItemHead;
        base: WebhookPayloadCheckRunCheckRunCheckSuitePullRequestsItemBase;
    };
    type WebhookPayloadCheckRunCheckRunCheckSuite = {
        id: number;
        node_id?: string;
        head_branch: string;
        head_sha: string;
        status: string;
        conclusion: null | string;
        url: string;
        before: string;
        after: string;
        pull_requests: Array<WebhookPayloadCheckRunCheckRunCheckSuitePullRequestsItem>;
        app: WebhookPayloadCheckRunCheckRunCheckSuiteApp;
        created_at: string;
        updated_at: string;
    };
    type WebhookPayloadCheckRunCheckRunOutput = {
        title: null | string;
        summary: null | string;
        text: null | string;
        annotations_count: number;
        annotations_url: string;
    };
    type WebhookPayloadCheckRunCheckRun = {
        id: number;
        node_id?: string;
        head_sha: string;
        external_id: string;
        url: string;
        html_url: string;
        details_url?: string;
        status: string;
        conclusion: null | string;
        started_at: string;
        completed_at: null | string;
        output: WebhookPayloadCheckRunCheckRunOutput;
        name: string;
        check_suite: WebhookPayloadCheckRunCheckRunCheckSuite;
        app: WebhookPayloadCheckRunCheckRunApp;
        pull_requests: Array<WebhookPayloadCheckRunCheckRunPullRequestsItem>;
    };
    type WebhookPayloadCheckRun = {
        action: "completed" | "created" | "requested_action" | "rerequested";
        check_run: WebhookPayloadCheckRunCheckRun;
        repository: PayloadRepository;
        sender: PayloadSender;
        organization?: WebhookPayloadCheckRunOrganization;
        requested_action?: WebhookPayloadCheckRunRequestedAction;
        installation?: WebhookPayloadCheckRunInstallation;
    };
}
