/// <reference types="node" />
import { createEventHandler } from "./event-handler/index";
import { createMiddleware } from "./middleware/index";
import { sign } from "./sign/index";
import { verify } from "./verify/index";
import { Options, WebhookEvent, WebhookError, WebhookEventHandlerError, HandlerFunction } from "./types";
import { IncomingMessage, ServerResponse } from "http";
import { WebhookEvents } from "./generated/get-webhook-payload-type-from-event";
declare class Webhooks<T extends WebhookEvent = WebhookEvent, U = {}> {
    sign: (payload: string | object) => string;
    verify: (eventPayload: string | object, signature: string) => boolean;
    on: <E extends WebhookEvents>(event: E | E[], callback: HandlerFunction<E, U>) => void;
    onAny: (callback: (event: WebhookEvent<any>) => any) => void;
    onError: (callback: (event: WebhookEventHandlerError) => any) => void;
    removeListener: <E extends WebhookEvents>(event: E | E[], callback: HandlerFunction<E, U>) => void;
    receive: (options: {
        id: string;
        name: string;
        payload: any;
    }) => Promise<void>;
    middleware: (request: IncomingMessage, response: ServerResponse, next?: (err?: any) => void) => void | Promise<void>;
    verifyAndReceive: (options: WebhookEvent & {
        signature: string;
    }) => Promise<void>;
    constructor(options?: Options<T>);
}
declare const createWebhooksApi: Function;
export { EventPayloads } from "./generated/event-payloads";
export { EventTypesPayload, WebhookEvents, } from "./generated/get-webhook-payload-type-from-event";
export { createEventHandler, createMiddleware, createWebhooksApi, Webhooks, WebhookEvent, WebhookError, sign, verify, };
