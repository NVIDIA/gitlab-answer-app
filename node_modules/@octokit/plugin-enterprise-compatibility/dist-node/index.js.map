{"version":3,"file":"index.js","sources":["../dist-src/version.js","../dist-src/is-issue-labels-update-or-replace.js","../dist-src/is-get-reference-or-list-references.js","../dist-src/index.js"],"sourcesContent":["export const VERSION = \"1.2.4\";\n","export function isIssueLabelsUpdateOrReplace({ method, url }) {\n    if (![\"POST\", \"PUT\"].includes(method)) {\n        return false;\n    }\n    if (!/\\/repos\\/[^/]+\\/[^/]+\\/issues\\/[^/]+\\/labels/.test(url)) {\n        return false;\n    }\n    return true;\n}\n","const REGEX_IS_GET_REFERENCE_PATH = /\\/repos\\/[^/]+\\/[^/]+\\/git\\/ref\\//;\nconst REGEX_IS_LIST_REFERENCES_PATH = /\\/repos\\/[^/]+\\/[^/]+\\/git\\/matching-refs\\//;\nexport function isGetReference({ method, url }) {\n    if (![\"GET\", \"HEAD\"].includes(method)) {\n        return false;\n    }\n    return REGEX_IS_GET_REFERENCE_PATH.test(url);\n}\nexport function isListReferences({ method, url }) {\n    if (![\"GET\", \"HEAD\"].includes(method)) {\n        return false;\n    }\n    return REGEX_IS_LIST_REFERENCES_PATH.test(url);\n}\n","import { RequestError } from \"@octokit/request-error\";\nimport { VERSION } from \"./version\";\nimport { isIssueLabelsUpdateOrReplace } from \"./is-issue-labels-update-or-replace\";\nimport { isGetReference, isListReferences, } from \"./is-get-reference-or-list-references\";\nexport function enterpriseCompatibility(octokit) {\n    octokit.hook.wrap(\"request\", async (request, options) => {\n        // see https://github.com/octokit/rest.js/blob/15.x/lib/routes.json#L3046-L3068\n        if (isIssueLabelsUpdateOrReplace(options)) {\n            options.data = options.labels;\n            delete options.labels;\n            // for @octokit/rest v16.x, remove validation of labels option\n            /* istanbul ignore if */\n            if (options.request.validate) {\n                delete options.request.validate.labels;\n            }\n            return request(options);\n        }\n        const isGetReferenceRequest = isGetReference(options);\n        const isListReferencesRequest = isListReferences(options);\n        if (isGetReferenceRequest || isListReferencesRequest) {\n            options.url = options.url.replace(/\\/repos\\/([^/]+)\\/([^/]+)\\/git\\/(ref|matching-refs)\\/(.*)$/, \"/repos/$1/$2/git/refs/$4\");\n            return request(options)\n                .then((response) => {\n                if (isGetReferenceRequest) {\n                    if (Array.isArray(response.data)) {\n                        throw new RequestError(`More than one reference found at \"${options.url}\"`, 404, {\n                            request: options,\n                        });\n                    }\n                    // âœ… received single reference\n                    return response;\n                }\n                // make sure that\n                if (!Array.isArray(response.data)) {\n                    response.data = [response.data];\n                }\n                return response;\n            })\n                .catch((error) => {\n                if (isListReferencesRequest && error.status === 404) {\n                    return {\n                        status: 200,\n                        headers: error.headers,\n                        data: [],\n                    };\n                }\n                throw error;\n            });\n        }\n        // TODO: implement fix for #62 here\n        // https://github.com/octokit/plugin-enterprise-compatibility.js/issues/60\n        if (/\\/orgs\\/[^/]+\\/teams/.test(options.url)) {\n            try {\n                return await request(options);\n            }\n            catch (error) {\n                if (error.status !== 404) {\n                    throw error;\n                }\n                if (!error.headers || !error.headers[\"x-github-enterprise-version\"]) {\n                    throw error;\n                }\n                const deprecatedUrl = options.url.replace(/\\/orgs\\/[^/]+\\/teams\\/[^/]+/, \"/teams/:team_id\");\n                throw new RequestError(`\"${options.method} ${options.url}\" is not supported in your GitHub Enterprise Server version. Please replace with octokit.request(\"${options.method} ${deprecatedUrl}\", { team_id })`, 404, {\n                    request: options,\n                });\n            }\n        }\n        return request(options);\n    });\n}\nenterpriseCompatibility.VERSION = VERSION;\n"],"names":["VERSION","isIssueLabelsUpdateOrReplace","method","url","includes","test","REGEX_IS_GET_REFERENCE_PATH","REGEX_IS_LIST_REFERENCES_PATH","isGetReference","isListReferences","enterpriseCompatibility","octokit","hook","wrap","request","options","data","labels","validate","isGetReferenceRequest","isListReferencesRequest","replace","then","response","Array","isArray","RequestError","catch","error","status","headers","deprecatedUrl"],"mappings":"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"}