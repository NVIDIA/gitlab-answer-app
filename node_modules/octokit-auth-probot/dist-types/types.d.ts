import { Octokit } from "@octokit/core";
import { createTokenAuth, Types as TokenAuthTypes } from "@octokit/auth-token";
import * as AppAuth from "@octokit/auth-app";
import { createUnauthenticatedAuth } from "@octokit/auth-unauthenticated";
declare type OctokitStrategyOptions = {
    octokit: InstanceType<typeof Octokit>;
    octokitOptions: ConstructorParameters<typeof Octokit> & {
        auth: unknown;
    };
};
export declare type StrategyOptions = (OctokitStrategyOptions & {
    token: string;
}) | (OctokitStrategyOptions & AppAuth.StrategyOptions);
export declare type AuthOptions = TokenAuthTypes["AuthOptions"] | AppAuth.InstallationAuthOptions | {
    type: "event-octokit";
    event: {
        id: string;
        name: string;
        payload: Record<string, unknown> & {
            action?: string;
            installation: {
                id: number;
            };
        };
    };
};
declare type TokenState = OctokitStrategyOptions & {
    type: "token";
    auth: ReturnType<typeof createTokenAuth>;
};
declare type AppState = OctokitStrategyOptions & {
    type: "app";
    auth: ReturnType<typeof AppAuth.createAppAuth>;
};
declare type UnauthenticatedState = OctokitStrategyOptions & {
    type: "unauthenticated";
    auth: ReturnType<typeof createUnauthenticatedAuth>;
};
export declare type State = TokenState | AppState | UnauthenticatedState;
export {};
