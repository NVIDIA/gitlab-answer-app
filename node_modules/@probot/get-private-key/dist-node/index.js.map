{"version":3,"file":"index.js","sources":["../dist-src/version.js","../dist-src/index.js"],"sourcesContent":["export const VERSION = \"0.0.0-development\";\n","import { resolve } from \"path\";\nimport { existsSync, readdirSync, readFileSync } from \"fs\";\nimport isBase64 from \"is-base64\";\nimport { VERSION } from \"./version\";\nexport function getPrivateKey(options = {}) {\n    const env = options.env || process.env;\n    const cwd = options.cwd || process.cwd();\n    if (options.filepath) {\n        return readFileSync(resolve(cwd, options.filepath), \"utf-8\");\n    }\n    if (env.PRIVATE_KEY) {\n        let privateKey = env.PRIVATE_KEY;\n        if (isBase64(privateKey)) {\n            // Decode base64-encoded certificate\n            privateKey = Buffer.from(privateKey, \"base64\").toString();\n        }\n        const begin = \"-----BEGIN RSA PRIVATE KEY-----\";\n        const end = \"-----END RSA PRIVATE KEY-----\";\n        if (privateKey.includes(begin) && privateKey.includes(end)) {\n            // Full key with new lines\n            return privateKey.replace(/\\\\n/g, \"\\n\");\n        }\n        throw new Error(`[@probot/get-private-key] The contents of \"env.PRIVATE_KEY\" could not be validated. Please check to ensure you have copied the contents of the .pem file correctly.`);\n    }\n    if (env.PRIVATE_KEY_PATH) {\n        const filepath = resolve(cwd, env.PRIVATE_KEY_PATH);\n        if (existsSync(filepath)) {\n            return readFileSync(filepath, \"utf-8\");\n        }\n        else {\n            throw new Error(`[@probot/get-private-key] Private key does not exists at path: \"${env.PRIVATE_KEY_PATH}\". Please check to ensure that \"env.PRIVATE_KEY_PATH\" is correct.`);\n        }\n    }\n    const pemFiles = readdirSync(cwd).filter((path) => path.endsWith(\".pem\"));\n    if (pemFiles.length > 1) {\n        const paths = pemFiles.join(\", \");\n        throw new Error(`[@probot/get-private-key] More than one file found: \"${paths}\". Set { filepath } option or set one of the environment variables: PRIVATE_KEY, PRIVATE_KEY_PATH`);\n    }\n    else if (pemFiles[0]) {\n        return getPrivateKey({ filepath: pemFiles[0], cwd });\n    }\n    return null;\n}\ngetPrivateKey.VERSION = VERSION;\n"],"names":["VERSION","getPrivateKey","options","env","process","cwd","filepath","readFileSync","resolve","PRIVATE_KEY","privateKey","isBase64","Buffer","from","toString","begin","end","includes","replace","Error","PRIVATE_KEY_PATH","existsSync","pemFiles","readdirSync","filter","path","endsWith","length","paths","join"],"mappings":";;;;;;;;;;AAAO,MAAMA,OAAO,GAAG,mBAAhB;;ACIA,SAASC,aAAT,CAAuBC,OAAO,GAAG,EAAjC,EAAqC;AACxC,QAAMC,GAAG,GAAGD,OAAO,CAACC,GAAR,IAAeC,OAAO,CAACD,GAAnC;AACA,QAAME,GAAG,GAAGH,OAAO,CAACG,GAAR,IAAeD,OAAO,CAACC,GAAR,EAA3B;;AACA,MAAIH,OAAO,CAACI,QAAZ,EAAsB;AAClB,WAAOC,eAAY,CAACC,YAAO,CAACH,GAAD,EAAMH,OAAO,CAACI,QAAd,CAAR,EAAiC,OAAjC,CAAnB;AACH;;AACD,MAAIH,GAAG,CAACM,WAAR,EAAqB;AACjB,QAAIC,UAAU,GAAGP,GAAG,CAACM,WAArB;;AACA,QAAIE,QAAQ,CAACD,UAAD,CAAZ,EAA0B;AACtB;AACAA,MAAAA,UAAU,GAAGE,MAAM,CAACC,IAAP,CAAYH,UAAZ,EAAwB,QAAxB,EAAkCI,QAAlC,EAAb;AACH;;AACD,UAAMC,KAAK,GAAG,iCAAd;AACA,UAAMC,GAAG,GAAG,+BAAZ;;AACA,QAAIN,UAAU,CAACO,QAAX,CAAoBF,KAApB,KAA8BL,UAAU,CAACO,QAAX,CAAoBD,GAApB,CAAlC,EAA4D;AACxD;AACA,aAAON,UAAU,CAACQ,OAAX,CAAmB,MAAnB,EAA2B,IAA3B,CAAP;AACH;;AACD,UAAM,IAAIC,KAAJ,CAAW,qKAAX,CAAN;AACH;;AACD,MAAIhB,GAAG,CAACiB,gBAAR,EAA0B;AACtB,UAAMd,QAAQ,GAAGE,YAAO,CAACH,GAAD,EAAMF,GAAG,CAACiB,gBAAV,CAAxB;;AACA,QAAIC,aAAU,CAACf,QAAD,CAAd,EAA0B;AACtB,aAAOC,eAAY,CAACD,QAAD,EAAW,OAAX,CAAnB;AACH,KAFD,MAGK;AACD,YAAM,IAAIa,KAAJ,CAAW,mEAAkEhB,GAAG,CAACiB,gBAAiB,mEAAlG,CAAN;AACH;AACJ;;AACD,QAAME,QAAQ,GAAGC,cAAW,CAAClB,GAAD,CAAX,CAAiBmB,MAAjB,CAAyBC,IAAD,IAAUA,IAAI,CAACC,QAAL,CAAc,MAAd,CAAlC,CAAjB;;AACA,MAAIJ,QAAQ,CAACK,MAAT,GAAkB,CAAtB,EAAyB;AACrB,UAAMC,KAAK,GAAGN,QAAQ,CAACO,IAAT,CAAc,IAAd,CAAd;AACA,UAAM,IAAIV,KAAJ,CAAW,wDAAuDS,KAAM,mGAAxE,CAAN;AACH,GAHD,MAIK,IAAIN,QAAQ,CAAC,CAAD,CAAZ,EAAiB;AAClB,WAAOrB,aAAa,CAAC;AAAEK,MAAAA,QAAQ,EAAEgB,QAAQ,CAAC,CAAD,CAApB;AAAyBjB,MAAAA;AAAzB,KAAD,CAApB;AACH;;AACD,SAAO,IAAP;AACH;AACDJ,aAAa,CAACD,OAAd,GAAwBA,OAAxB;;;;"}