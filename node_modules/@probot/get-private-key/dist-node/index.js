'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = require('path');
var fs = require('fs');
var isBase64 = _interopDefault(require('is-base64'));

const VERSION = "0.0.0-development";

function getPrivateKey(options = {}) {
  const env = options.env || process.env;
  const cwd = options.cwd || process.cwd();

  if (options.filepath) {
    return fs.readFileSync(path.resolve(cwd, options.filepath), "utf-8");
  }

  if (env.PRIVATE_KEY) {
    let privateKey = env.PRIVATE_KEY;

    if (isBase64(privateKey)) {
      // Decode base64-encoded certificate
      privateKey = Buffer.from(privateKey, "base64").toString();
    }

    const begin = "-----BEGIN RSA PRIVATE KEY-----";
    const end = "-----END RSA PRIVATE KEY-----";

    if (privateKey.includes(begin) && privateKey.includes(end)) {
      // Full key with new lines
      return privateKey.replace(/\\n/g, "\n");
    }

    throw new Error(`[@probot/get-private-key] The contents of "env.PRIVATE_KEY" could not be validated. Please check to ensure you have copied the contents of the .pem file correctly.`);
  }

  if (env.PRIVATE_KEY_PATH) {
    const filepath = path.resolve(cwd, env.PRIVATE_KEY_PATH);

    if (fs.existsSync(filepath)) {
      return fs.readFileSync(filepath, "utf-8");
    } else {
      throw new Error(`[@probot/get-private-key] Private key does not exists at path: "${env.PRIVATE_KEY_PATH}". Please check to ensure that "env.PRIVATE_KEY_PATH" is correct.`);
    }
  }

  const pemFiles = fs.readdirSync(cwd).filter(path => path.endsWith(".pem"));

  if (pemFiles.length > 1) {
    const paths = pemFiles.join(", ");
    throw new Error(`[@probot/get-private-key] More than one file found: "${paths}". Set { filepath } option or set one of the environment variables: PRIVATE_KEY, PRIVATE_KEY_PATH`);
  } else if (pemFiles[0]) {
    return getPrivateKey({
      filepath: pemFiles[0],
      cwd
    });
  }

  return null;
}
getPrivateKey.VERSION = VERSION;

exports.getPrivateKey = getPrivateKey;
//# sourceMappingURL=index.js.map
