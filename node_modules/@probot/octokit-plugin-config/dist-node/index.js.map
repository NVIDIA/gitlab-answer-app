{"version":3,"file":"index.js","sources":["../dist-src/version.js","../dist-src/util/get-config-file.js","../dist-src/util/extends-to-get-content-params.js","../dist-src/util/get-config-files.js","../dist-src/compose-config-get.js","../dist-src/index.js"],"sourcesContent":["export const VERSION = \"1.1.0\";\n","import yaml from \"js-yaml\";\nconst SUPPORTED_FILE_EXTENSIONS = [\"json\", \"yml\", \"yaml\"];\n/**\n * Load configuration from a given repository and path.\n *\n * @param octokit Octokit instance\n * @param options\n */\nexport async function getConfigFile(octokit, { owner, repo, path, ref }) {\n    const fileExtension = path.split(\".\").pop().toLowerCase();\n    if (!SUPPORTED_FILE_EXTENSIONS.includes(fileExtension)) {\n        throw new Error(`[@probot/octokit-plugin-config] .${fileExtension} extension is not support for configuration (path: \"${path}\")`);\n    }\n    // https://docs.github.com/en/rest/reference/repos#get-repository-content\n    const endpoint = {\n        method: \"GET\",\n        url: \"/repos/{owner}/{repo}/contents/{path}\",\n        owner,\n        repo,\n        path,\n        mediaType: {\n            format: \"raw\",\n        },\n        // this can be just `ref` once https://github.com/octokit/endpoint.js/issues/206 is resolved\n        ...(ref ? { ref } : {}),\n    };\n    const { url } = await octokit.request.endpoint(endpoint);\n    const emptyConfigResult = {\n        owner,\n        repo,\n        path,\n        url,\n        config: null,\n    };\n    try {\n        const { data, headers } = await octokit.request(endpoint);\n        // If path is a submodule, or a folder, then a JSON string is returned with\n        // the \"Content-Type\" header set to \"application/json; charset=utf-8\".\n        //\n        // - https://docs.github.com/en/rest/reference/repos#if-the-content-is-a-submodule\n        // - https://docs.github.com/en/rest/reference/repos#if-the-content-is-a-directory\n        //\n        // symlinks just return the content of the linked file when requesting the raw formt,\n        // so we are fine\n        if (headers[\"content-type\"] === \"application/json; charset=utf-8\") {\n            throw new Error(`[@probot/octokit-plugin-config] ${url} exists, but is either a directory or a submodule. Ignoring.`);\n        }\n        if (fileExtension === \"json\") {\n            if (typeof data === \"string\") {\n                throw new Error(`[@probot/octokit-plugin-config] Configuration could not be parsed from ${url} (invalid JSON)`);\n            }\n            return {\n                ...emptyConfigResult,\n                config: data,\n            };\n        }\n        const config = (yaml.load(data) || {});\n        if (typeof config === \"string\") {\n            throw new Error(`[@probot/octokit-plugin-config] Configuration could not be parsed from ${url} (YAML is not an object)`);\n        }\n        return {\n            ...emptyConfigResult,\n            config,\n        };\n    }\n    catch (error) {\n        if (error.status === 404) {\n            return emptyConfigResult;\n        }\n        if (error.name === \"YAMLException\") {\n            const reason = /unknown tag/.test(error.message)\n                ? \"unsafe YAML\"\n                : \"invalid YAML\";\n            throw new Error(`[@probot/octokit-plugin-config] Configuration could not be parsed from ${url} (${reason})`);\n        }\n        throw error;\n    }\n}\n","const EXTENDS_REGEX = new RegExp(\"^\" +\n    \"(?:([a-z\\\\d](?:[a-z\\\\d]|-(?=[a-z\\\\d])){0,38})/)?\" + // org\n    \"([-_.\\\\w\\\\d]+)\" + // project\n    \"(?::([-_./\\\\w\\\\d]+\\\\.ya?ml))?\" + // filename\n    \"$\", \"i\");\n/**\n * Computes parameters to retrieve the configuration file specified in _extends\n *\n * Base can either be the name of a repository in the same organization or\n * a full slug \"organization/repo\".\n *\n * @param options\n * @return The params needed to retrieve a configuration file\n */\nexport function extendsToGetContentParams({ owner, path, url, extendsValue, }) {\n    if (typeof extendsValue !== \"string\") {\n        throw new Error(`[@probot/octokit-plugin-config] Invalid value ${JSON.stringify(extendsValue)} for _extends in ${url}`);\n    }\n    const match = extendsValue.match(EXTENDS_REGEX);\n    if (match === null) {\n        throw new Error(`[@probot/octokit-plugin-config] Invalid value \"${extendsValue}\" for _extends in ${url}`);\n    }\n    return {\n        owner: match[1] || owner,\n        repo: match[2],\n        path: match[3] || path,\n    };\n}\n","import { getConfigFile } from \"./get-config-file\";\nimport { extendsToGetContentParams } from \"./extends-to-get-content-params\";\n/**\n * Load configuration from selected repository file. If the file does not exist\n * it loads configuration from the owners `.github` repository.\n *\n * If the repository file configuration includes an `_extends` key, that file\n * is loaded. Same with the target file until no `_extends` key is present.\n *\n * @param octokit Octokit instance\n * @param options\n */\nexport async function getConfigFiles(octokit, { owner, repo, path, branch }) {\n    const requestedRepoFile = await getConfigFile(octokit, {\n        owner,\n        repo,\n        path,\n        ref: branch,\n    });\n    // if no configuration file present in selected repository,\n    // try to load it from the `.github` repository\n    if (!requestedRepoFile.config) {\n        if (repo === \".github\") {\n            return [requestedRepoFile];\n        }\n        const defaultRepoConfig = await getConfigFile(octokit, {\n            owner,\n            repo: \".github\",\n            path,\n        });\n        return [requestedRepoFile, defaultRepoConfig];\n    }\n    // if the configuration has no `_extends` key, we are done here.\n    if (!requestedRepoFile.config._extends) {\n        return [requestedRepoFile];\n    }\n    // parse the value of `_extends` into request parameters to\n    // retrieve the new configuration file\n    let extendConfigOptions = extendsToGetContentParams({\n        owner,\n        path,\n        url: requestedRepoFile.url,\n        extendsValue: requestedRepoFile.config._extends,\n    });\n    // remove the `_extends` key from the configuration that is returned\n    delete requestedRepoFile.config._extends;\n    const files = [requestedRepoFile];\n    // now load the configuration linked from the `_extends` key. If that\n    // configuration also includes an `_extends` key, then load that configuration\n    // as well, until the target configuration has no `_extends` key\n    do {\n        const extendRepoConfig = await getConfigFile(octokit, extendConfigOptions);\n        files.push(extendRepoConfig);\n        if (!extendRepoConfig.config || !extendRepoConfig.config._extends) {\n            return files;\n        }\n        extendConfigOptions = extendsToGetContentParams({\n            owner,\n            path,\n            url: extendRepoConfig.url,\n            extendsValue: extendRepoConfig.config._extends,\n        });\n        delete extendRepoConfig.config._extends;\n        // Avoid loops\n        const alreadyLoaded = files.find((file) => file.owner === extendConfigOptions.owner &&\n            file.repo === extendConfigOptions.repo &&\n            file.path === extendConfigOptions.path);\n        if (alreadyLoaded) {\n            throw new Error(`[@probot/octokit-plugin-config] Recursion detected. Ignoring  \"_extends: ${extendRepoConfig.config._extends}\" from ${extendRepoConfig.url} because ${alreadyLoaded.url} was already loaded.`);\n        }\n    } while (true);\n}\n","import { getConfigFiles } from \"./util/get-config-files\";\n/**\n * Loads configuration from one or multiple files and resolves with\n * the combined configuration as well as the list of files the configuration\n * was loaded from\n *\n * @param octokit Octokit instance\n * @param options\n */\nexport async function composeConfigGet(octokit, { owner, repo, defaults, path, branch }) {\n    const files = await getConfigFiles(octokit, {\n        owner,\n        repo,\n        path,\n        branch,\n    });\n    const configs = files\n        .map((file) => file.config)\n        .reverse()\n        .filter(Boolean);\n    return {\n        files,\n        config: typeof defaults === \"function\"\n            ? defaults(configs)\n            : Object.assign({}, defaults, ...configs),\n    };\n}\n","import { VERSION } from \"./version\";\nimport { composeConfigGet } from \"./compose-config-get\";\n/**\n * @param octokit Octokit instance\n */\nexport function config(octokit) {\n    return {\n        config: {\n            async get(options) {\n                return composeConfigGet(octokit, options);\n            },\n        },\n    };\n}\nconfig.VERSION = VERSION;\nexport { composeConfigGet } from \"./compose-config-get\";\n"],"names":["VERSION","SUPPORTED_FILE_EXTENSIONS","getConfigFile","octokit","owner","repo","path","ref","fileExtension","split","pop","toLowerCase","includes","Error","endpoint","method","url","mediaType","format","request","emptyConfigResult","config","data","headers","yaml","load","error","status","name","reason","test","message","EXTENDS_REGEX","RegExp","extendsToGetContentParams","extendsValue","JSON","stringify","match","getConfigFiles","branch","requestedRepoFile","defaultRepoConfig","_extends","extendConfigOptions","files","extendRepoConfig","push","alreadyLoaded","find","file","composeConfigGet","defaults","configs","map","reverse","filter","Boolean","Object","assign","get","options"],"mappings":"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"}